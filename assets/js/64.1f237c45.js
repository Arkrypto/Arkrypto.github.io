(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{1155:function(s,a,n){s.exports=n.p+"assets/img/Figure_16.f039ed24.png"},1156:function(s,a,n){s.exports=n.p+"assets/img/Figure_17.be84cd0e.png"},1157:function(s,a,n){s.exports=n.p+"assets/img/Figure_18.f039ed24.png"},1158:function(s,a,n){s.exports=n.p+"assets/img/Figure_19.1a047c7d.png"},1159:function(s,a,n){s.exports=n.p+"assets/img/Figure_20.8d026384.png"},1477:function(s,a,n){"use strict";n.r(a);var e=n(3),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("优化训练模式，并且处理非数字数据")])]),s._v(" "),a("h2",{attrs:{id:"optimization"}},[s._v("Optimization")]),s._v(" "),a("blockquote",[a("p",[s._v("微调管道内部，超参数优化")]),s._v(" "),a("p",[s._v("Hyper-parameters optimization")])]),s._v(" "),a("h3",{attrs:{id:"构建管道和准备数据"}},[s._v("构建管道和准备数据")]),s._v(" "),a("p",[s._v("构建管道")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import MinMaxScaler\n\npipe = make_pipeline(MinMaxScaler(), SGDClassifier(max_iter=1000))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("查看管道参数")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("print(pipe.get_params())\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("准备数据")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\n\nX, y = load_digits(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=12)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"gridsearchcv-调优"}},[s._v("GridSearchCV 调优")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("GridSearchCV")]),s._v("搜索当前训练集下的最优参数")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 使用网格搜索找到当前训练集下最优参数\nfrom sklearn.model_selection import GridSearchCV\nimport pandas as pd\n\nparam = {'logisticregression__C': [0.1, 1.0, 10],\n         'logisticregression__penalty': ['l2', 'l1']}\ngrid = GridSearchCV(pipe, param_grid=param, cv=3, n_jobs=1, return_train_score=True)\ngrid.fit(X_train, y_train)\nprint(grid.get_params())\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("这里要调优的参数为"),a("code",[s._v("C")]),s._v("和"),a("code",[s._v("penalty")]),s._v("，需要在"),a("code",[s._v("param")]),s._v("手动中写明")]),s._v(" "),a("li",[s._v("注意这里的"),a("code",[s._v("grid")]),s._v("就是一个机器学习模型，和管道"),a("code",[s._v("pipe")]),s._v("，分类器"),a("code",[s._v("clf")]),s._v("相同")]),s._v(" "),a("li",[s._v("只有当"),a("code",[s._v("grid")]),s._v("已经经过训练，并且调用了"),a("code",[s._v("score")]),s._v("函数后，其最优函数才会确定下来，否则不认为当前训练集已经结束")])]),s._v(" "),a("p",[s._v("查看各参数对训练的影响以及结果")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("df_grid = pd.DataFrame(grid.cv_results_)\nprint(df_grid)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_logisticregression__C  ... split0_train_score split1_train_score  split2_train_score  mean_train_score  std_train_score\n0       0.126961      0.001999         0.006072        0.007825                         0.1  ...           0.949889           0.953229            0.949889          0.951002         0.001575\n1       0.247481      0.017783         0.000620        0.000040                         0.1  ...           0.891982           0.909800            0.904232          0.902004         0.007442\n2       0.425019      0.011945         0.000617        0.000032                         1.0  ...           0.989978           0.988864            0.984410          0.987751         0.002406\n3       1.135990      0.046367         0.000678        0.000057                         1.0  ...           0.982183           0.982183            0.979955          0.981440         0.001050\n4       1.080702      0.094789         0.000640        0.000035                          10  ...           0.998886           0.998886            0.998886          0.998886         0.000000\n5       5.193207      0.190867         0.000609        0.000019                          10  ...           1.000000           1.000000            1.000000          1.000000         0.000000\n\n[6 rows x 18 columns]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("查看当前训练集下最优的"),a("code",[s._v("C/penalty")])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("print(grid.best_params_)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{'logisticregression__C': 1.0, 'logisticregression__penalty': 'l2'}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对模型"),a("code",[s._v("grid")]),s._v("进行精准度测试")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("accuracy = grid.score(X_test, y_test)\nprint('Accuracy score of the {} is {:.2f}'.format(grid.__class__.__name__, accuracy))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Accuracy score of the GridSearchCV is 0.97\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"交叉验证调优后管道"}},[s._v("交叉验证调优后管道")]),s._v(" "),a("p",[s._v("前面已经提到，这里的"),a("code",[s._v("grid")]),s._v("是同"),a("code",[s._v("clf/pipe")]),s._v("一样的机器学习模型，自然可以对原数据进行交叉验证")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn.model_selection import cross_validate\nimport matplotlib.pyplot as plt\n\nscores = cross_validate(grid, X, y, cv=3, n_jobs=1, return_train_score=True)\ndf_scores = pd.DataFrame(scores)\nprint(df_scores)\ndf_scores[['train_score', 'test_score']].boxplot()\nplt.show()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    fit_time  score_time  test_score  train_score\n0  23.017125    0.000651    0.928214     0.985810\n1  25.200372    0.000676    0.946578     0.997496\n2  23.103306    0.000675    0.924875     0.993322\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("img",{attrs:{src:n(1155)}}),s._v(" "),a("h3",{attrs:{id:"调优训练-breast-cancer"}},[s._v("调优训练 breast_cancer")]),s._v(" "),a("p",[s._v("在乳腺癌数据集上对管道进行调优并训练测试")]),s._v(" "),a("ol",[a("li",[s._v("导入数据，分割数据")]),s._v(" "),a("li",[s._v("构建管道，调优参数")]),s._v(" "),a("li",[s._v("训练测试，交叉验证")])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn.datasets import load_breast_cancer\nfrom sklearn.metrics import balanced_accuracy_score\n\nX, y = load_breast_cancer(return_X_y=True)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=12, stratify=y)\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.preprocessing import StandardScaler\n\npipe = make_pipeline(StandardScaler(), SGDClassifier(max_iter=1000))\n\nfrom sklearn.model_selection import GridSearchCV\n\nparam = {'sgdclassifier__loss': ['hinge', 'log'],\n         'sgdclassifier__penalty': ['l2','l1']}\ngrid = GridSearchCV(pipe, cv=3, n_jobs=1, param_grid=param, return_train_score=True)\ngrid.fit(X_train, y_train)\n\naccuracy = grid.score(X_test, y_test)\n\n\nfrom sklearn.model_selection import cross_validate\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nscores = cross_validate(grid, X, y, scoring='balanced_accuracy',\n                        cv=3, return_train_score=True)\ndf_scores = pd.DataFrame(scores)\ndf_scores[['train_score', 'test_score']].boxplot()\nplt.show()\n\nprint(grid.best_params_)\nprint(df_scores)\nprint(\"the accuracy is \", accuracy)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{'sgdclassifier__loss': 'hinge', 'sgdclassifier__penalty': 'l1'}\n\n   fit_time  score_time  test_score  train_score\n0  0.031983    0.000585    0.962067     0.980303\n1  0.034171    0.000492    0.949343     0.987261\n2  0.032296    0.000593    0.963445     0.988076\n\nthe accuracy is 0.9440559440559441\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("img",{attrs:{src:n(1156)}}),s._v(" "),a("h3",{attrs:{id:"管道使用总结"}},[s._v("管道使用总结")]),s._v(" "),a("p",[s._v("使用"),a("code",[s._v("scikit-learn")]),s._v("十行以内训练并测试一个管道，包括数据预处理、参数调优、交叉验证")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.datasets import load_digits\nimport matplotlib.pyplot as plt\n\nX, y = load_digits(return_X_y = True)\n\npipe = make_pipeline(MinMaxScaler(),\n                     LogisticRegression(solver='saga', multi_class='auto', random_state=42, max_iter=5000))\nparam = {'logisticregression__C': [0.1, 1.0, 10],\n        'logisticregression__penalty': ['l2', 'l1']}\ngrid = GridSearchCV(pipe, param_grid=param, cv=3, n_jobs=-1)\nscores = pd.DataFrame(cross_validate(grid, X, y, cv=3, n_jobs=-1, return_train_score=True))\nscores[['train_score', 'test_score']].boxplot()\n\nplt.show()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("img",{attrs:{src:n(1157)}}),s._v(" "),a("h2",{attrs:{id:"heterogeneous-data"}},[s._v("Heterogeneous Data")]),s._v(" "),a("blockquote",[a("p",[s._v("Heterogeneous data")]),s._v(" "),a("p",[s._v("处理除数字以外的数据")])]),s._v(" "),a("p",[s._v("导入外部数据集")]),s._v(" "),a("p",[s._v("注意"),a("code",[s._v("shell")]),s._v("的位置，这里找的是当前"),a("code",[s._v("shell")]),s._v("路径的相对路径")]),s._v(" "),a("ul",[a("li",[s._v("通过"),a("code",[s._v("os.getcwd()")]),s._v("获取当前路径（pwd）")])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import pandas as pd\nimport os\n\nprint(os.getcwd())\n\ndata = pd.read_csv(os.path.join('data','titanic_openml.csv'), na_values='?')\nprint(data.head(7))\nprint(data.tail(4))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"先拟合再学习"}},[s._v("先拟合再学习")]),s._v(" "),a("p",[s._v("从原始数据中提取出数据集")]),s._v(" "),a("ul",[a("li",[s._v("在该泰坦尼克模型中，自变量为年龄、性别、是否上船、恐惧等因素，因变量为是否存活")])]),s._v(" "),a("p",[s._v("分割数据集为训练集和测试集，采用线性回归模型进行学习")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("y = data['survived']\nX = data.drop(columns='survived')\n\nprint(y)\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=12)\n\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("ul",[a("li",[s._v("必然报错，因为"),a("code",[s._v("fit")]),s._v("方法接收的数据集要求数据为数字型，而这里的很多数据如性别、是否上船并不是数字数据")])]),s._v(" "),a("p",[s._v("使用管道处理非数字数据，同时使用管道标准化数字数据，这里实际上都是预处理数据的过程")]),s._v(" "),a("ul",[a("li",[s._v("处理非数字数据，即转化为数字数据同时处理缺失数据\n"),a("ul",[a("li",[a("code",[s._v("SimpleImputer(strategy='constant')")])]),s._v(" "),a("li",[a("code",[s._v("OneHotEncoder()")])])])]),s._v(" "),a("li",[s._v("标准化数字数据同时处理缺失数据\n"),a("ul",[a("li",[a("code",[s._v("SimpleImputer(strategy='mean')")])]),s._v(" "),a("li",[a("code",[s._v("StandardScaler()")])])])])]),s._v(" "),a("p",[a("code",[s._v("OneHotEncoder")]),s._v("示例")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nohe = make_pipeline(SimpleImputer(strategy='constant'), OneHotEncoder())\nX_encoded = ohe.fit_transform(X_train[['sex', 'embarked']])\nX_encoded.toarray()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[[0. 1. 1. 0. 0. 0.]\n [0. 1. 0. 0. 1. 0.]\n [0. 1. 1. 0. 0. 0.]\n ...\n [0. 1. 0. 0. 1. 0.]\n [1. 0. 0. 0. 1. 0.]\n [0. 1. 1. 0. 0. 0.]]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("处理"),a("code",[s._v("titanic")]),s._v("数据")]),s._v(" "),a("p",[s._v("1、提取非数字列和数字列")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("col_cat = ['sex', 'embarked']\ncol_num = ['age', 'sibsp', 'parch', 'fare']\n\nX_train_cat = X_train[col_cat]\nX_test_cat = X_test[col_cat]\nX_train_num = X_train[col_num]\nX_test_num = X.test[col_num]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("2、构建管道预处理数据")]),s._v(" "),a("p",[s._v("为什么要用管道而不是单独预处理，因为需要同时处理缺失数据")]),s._v(" "),a("ul",[a("li",[s._v("数字化非数字数据")]),s._v(" "),a("li",[s._v("标准化数字数据")]),s._v(" "),a("li",[s._v("处理缺失数据")])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn.pipeline import make_pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nscaler_cat = make_pipeline(SimpleImputer(strategy='constant'), OneHotEncoder())\nscaler_num = make_pipeline(SimpleImputer(strategy='mean'), StandardScaler())\n\nX_train_cat_scaled = scaler_cat.fit_transform(X_train_cat)\nX_test_cat_scaled = scaler_cat.transform(X_test_cat)\nX_train_num_scaled = scaler_num.fit_transform(X_train_num)\nX_tes\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("3、合并预处理后的数字数据和非数字数据，采用矩阵横向合并的方法（即合并列为一张大表）")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import numpy as np\nfrom scipy import sparse\nX_train_scaled = sparse.hstack((X_train_cat_scaled, \n                sparse.csr_matrix(X_train_num_scaled)))\nX_test_scaled = sparse.hstack((X_test_cat_scaled, \n                sparse.csr_matrix(X_test_num_scaled)))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("4、现在已经有完整的数字标准化后的训练、测试数据，直接构建模型开始学习"),a("code",[s._v("(fit)")]),s._v("即可")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('from sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression()\nclf.fit(X_train_scaled, y_train)\naccuracy = clf.score(X_test_scaled, y_test)\nprint("Accuracy score of the {} is {:.2f}".format(clf.__class__.__name__, accuracy))\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"通过管道学习"}},[s._v("通过管道学习")]),s._v(" "),a("p",[s._v("上述过程可以概括为：")]),s._v(" "),a("ol",[a("li",[s._v("预处理数据\n"),a("ul",[a("li",[s._v("提取数据的非数字列和数字列")]),s._v(" "),a("li",[s._v("通过管道分别数字化、标准化处理非数字、数字数据，同时处理缺失数据")]),s._v(" "),a("li",[s._v("合并处理后的数据")])])]),s._v(" "),a("li",[s._v("建立模型学习并测试")])]),s._v(" "),a("p",[s._v("和之前的学习一样，上述过程可以揉合到一个管道中进行，即构建一个含有预处理功能和学习功能的管道")]),s._v(" "),a("p",[s._v("这里有一个问题，就是对于数字数据和非数字数据，其预处理的方式并不同，所以管道的预处理功能应该针对特定列有不同的处理方法")]),s._v(" "),a("p",[s._v("这里用到"),a("code",[s._v("sklearn.compose.make_column_transformer(transformer, col_name)")]),s._v("合并多个管道并使之作用于不同列")]),s._v(" "),a("ol",[a("li",[s._v("导入数据，独立分割\n"),a("ul",[a("li",[a("code",[s._v("data = pd.read_csv(os.path.join(), na_values='?')")])]),s._v(" "),a("li",[a("code",[s._v("train_test_split")])])])]),s._v(" "),a("li",[s._v("构建预处理管道\n"),a("ul",[a("li",[a("code",[s._v("make_pipeline(空值处理器, 预处理器)")])])])]),s._v(" "),a("li",[s._v("合并预处理管道\n"),a("ul",[a("li",[a("code",[s._v("make_column_transformer((预处理管道, 列名)...)")])])])]),s._v(" "),a("li",[s._v("构建总管道\n"),a("ul",[a("li",[a("code",[s._v("make_pipeline(预处理器, 分类器)")])])])]),s._v(" "),a("li",[s._v("学习并测试\n"),a("ul",[a("li",[a("code",[s._v("fit()/score()")])])])])]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport os\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nimport pandas as pd\nimport numpy as np\n\ndata = pd.read_csv(os.path.join('data','titanic_openml.csv'), na_values='?')\ny = data['survived']\nX = data.drop(columns='survived')\n\n# print(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=12)\n\n# print(y_train)\n\ncol_cat = ['sex', 'embarked']\ncol_num = ['age', 'sibsp', 'parch', 'fare']\n\npre_cat = make_pipeline(SimpleImputer(strategy='constant'), OneHotEncoder(handle_unknown='ignore'))\npre_num = make_pipeline(SimpleImputer(strategy='mean'), StandardScaler())\n\nfrom sklearn.compose import make_column_transformer\n\npreprocessor = make_column_transformer((pre_cat, col_cat), (pre_num, col_num))\npipe = make_pipeline(preprocessor, LogisticRegression(solver='lbfgs'))\npipe.fit(X_train, y_train)\naccuracy = pipe.score(X_test, y_test)\nprint('Accuracy score of the {} is {:.2f}'.format(pipe.__class__.__name__, accuracy))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("h3",{attrs:{id:"优化管道参数"}},[s._v("优化管道参数")]),s._v(" "),a("p",[s._v("在上述包含预处理功能和学习功能的管道的基础上，在正式测试之前使用网格搜索"),a("code",[s._v("GridSearchCV")]),s._v("对其参数进行调优")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_validate\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 调优参数\nparam = {'columntransformer__pipeline-2__simpleimputer__strategy': ['mean', 'median'],\n        'logisticregression__C': [0.1, 1.0, 10]}\ngrid = GridSearchCV(pipe, param_grid=param, cv=5, n_jobs=1)\n\ngrid.fit(X_train, y_train)\nprint(grid.score(X_test, y_test))\n# 交叉验证得分\nscores = cross_validate(grid, X, y, scoring='balanced_accuracy', cv=5, n_jobs=-1, return_train_score=True)\n# 绘制箱型图\ndf_scores = pd.DataFrame(scores)\ndf_scores[['train_score', 'test_score']].boxplot()\nplt.show()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("img",{attrs:{src:n(1158)}}),s._v(" "),a("h3",{attrs:{id:"adult-openml-csv"}},[s._v("adult_openml.csv")]),s._v(" "),a("p",[s._v("使用同样的方法处理"),a("code",[s._v("adult_openml")]),s._v("数据集")]),s._v(" "),a("h4",{attrs:{id:"预处理再拟合"}},[s._v("预处理再拟合")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import os\nimport pandas as pd\n\n\ndata = pd.read_csv(os.path.join('data', 'adult_openml.csv'), na_values='?')\n# print(data.head(7))\n\ny = data['class']\nX = data.drop(columns=['class', 'fnlwgt', 'capitalgain', 'capitalloss'])\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=12)\n# print(y_train)\n\ncol_cat = ['workclass', 'education', 'marital-status', 'relationship', 'race', 'sex', 'native-country']\ncol_num = ['age', 'education-num', 'hoursperweek']\n\nX_train_cat = X_train[col_cat]\nX_test_cat = X_test[col_cat]\nX_train_num = X_train[col_num]\nX_test_num = X_test[col_num]\n\nfrom sklearn.preprocessing import KBinsDiscretizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import make_pipeline\n\n\ncat_pipe = make_pipeline(SimpleImputer(strategy='constant'), OneHotEncoder())\nnum_pipe = make_pipeline(SimpleImputer(strategy='mean'), StandardScaler())\n\nX_train_cat_scaled = cat_pipe.fit_transform(X_train_cat)\nX_test_cat_scaled = cat_pipe.transform(X_test_cat)\nX_train_num_scaled = num_pipe.fit_transform(X_train_num)\nX_test_num_scaled = num_pipe.transform(X_test_num)\n\nimport numpy as np\nfrom scipy import sparse\n\nX_train_scaled = sparse.hstack((X_train_cat_scaled, \n                sparse.csr_matrix(X_train_num_scaled)))\nX_test_scaled = sparse.hstack((X_test_cat_scaled, \n                sparse.csr_matrix(X_test_num_scaled)))\n\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(max_iter=1000)\nclf.fit(X_train_scaled, y_train)\naccuracy = clf.score(X_test_scaled, y_test)\nprint('accuracy of the {} is {:.2f}'.format(clf.__class__.__name__, accuracy))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("accuracy of the LogisticRegression is 0.83\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"优化管道处理"}},[s._v("优化管道处理")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import os\nimport pandas as pd\n\ndata = pd.read_csv(os.path.join('data', 'adult_openml.csv'), na_values='?')\n# print(data.head(3))\ny = data['class']\nX = data.drop(columns=['class', 'fnlwgt', 'capitalgain', 'capitalloss'])\n# print(X)\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=12)\n# print(y_train)\nencoder = LabelEncoder()\ny_train = encoder.fit_transform(y_train)\ny_test = encoder.transform(y_test)\n\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n\npre_cat = make_pipeline(SimpleImputer(strategy='constant'), OneHotEncoder(handle_unknown='ignore'))\npre_num = make_pipeline(SimpleImputer(strategy='mean'), StandardScaler())\n\ncol_cat = ['workclass', 'education', 'marital-status', 'relationship', 'race', 'sex', 'native-country']\ncol_num = ['age', 'education-num', 'hoursperweek']\n\npreprocessor = make_column_transformer((pre_cat, col_cat), (pre_num, col_num))\n# preprocessor.fit(X_train, y_train)\n\npipe = make_pipeline(preprocessor, LogisticRegression(solver='lbfgs', max_iter=5000))\n# pipe.fit(X_train, y_train)\n\nparam = {'logisticregression__C': [0.1, 1.0, 10]}\ngrid = GridSearchCV(pipe, param_grid=param, cv=5, n_jobs=1)\ngrid.fit(X_train, y_train)\naccuracy = grid.score(X_test, y_test)\nprint('accuracy of the {} is {:.2f}'.format(grid.__class__.__name__, accuracy))\n\nfrom sklearn.model_selection import cross_validate\nimport matplotlib.pyplot as plt\nscores = pd.DataFrame(cross_validate(grid, X, y, scoring='balanced_accuracy', cv=3, n_jobs=-1, return_train_score=True))\nprint(scores)\nscores[['train_score', 'test_score']].boxplot(whis=10)\nplt.show()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("accuracy of the GridSearchCV is 0.83\n\n    fit_time  score_time  test_score  train_score\n0  11.303147    0.064652    0.719383     0.729532\n1  12.427096    0.067366    0.730889     0.723769\n2  12.042301    0.078128    0.723290     0.725647\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("img",{attrs:{src:n(1159)}})])}),[],!1,null,null,null);a.default=r.exports}}]);