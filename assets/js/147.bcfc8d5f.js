(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{1393:function(n,s,a){"use strict";a.r(s);var i=a(3),t=Object(i.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("blockquote",[s("p",[n._v("排序数组（912）")])]),n._v(" "),s("h2",{attrs:{id:"冒泡排序"}},[n._v("冒泡排序")]),n._v(" "),s("p",[n._v("最呆的解法，碰到大的就交换位置")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int[] sortArray(int[] nums) {\n        //两层遍历整个数组\n        for(int i = 0; i < nums.length; i++){\n            //用布尔变量记录是否还需排序，若本轮未排序，则直接返回nums\n            boolean flag = false;\n            for(int j = i+1; j < nums.length; j++){\n                //若更大，直接交换位置\n                if(nums[i]>nums[j]){\n                    int temp = nums[i];\n                    nums[i] = nums[j];\n                    nums[j] = temp;\n                    flag = true;\n                }\n            }\n            if(!flag){\n                return nums;\n            }\n        }\n        return nums;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("h2",{attrs:{id:"选择排序"}},[n._v("选择排序")]),n._v(" "),s("p",[n._v("从首位开始，选择当前位之后最小的元素与当前位交换，直到交换完倒数第二个元素，排序完成")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Solution {\n\n    public int[] sortArray(int[] nums){\n        selectSort(nums);\n        return nums;\n    }\n\n    public void selectSort(int[] nums){\n        int n = nums.length;\n        for(int i = 0; i < n-1; i++){\n            int minIndex = i;\n            for(int j = i+1; j < n; j++){\n                if(nums[j] < nums[minIndex]){\n                    minIndex = j;\n                }\n            }\n            swap(nums, i, minIndex);\n        }\n    }\n\n    public void swap(int[] nums, int i, int j){\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("h2",{attrs:{id:"插入排序"}},[n._v("插入排序")]),n._v(" "),s("p",[n._v("顾名思义，插入排序即将当前元素插入到某个位置，该位置左边元素均小于当前元素，右边元素均大于当前元素")]),n._v(" "),s("p",[n._v("为了实现这一功能，必须“由小及大”，即先满足两个元素的插入，再三个、四个...进而实现整个数组的插入")]),n._v(" "),s("p",[n._v("从队首开始，和第二个元素比较，插入排序；第二个元素和第三个元素比较，将第三个元素插入到适当位置，排序；第三个与第四个......")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int[] sortArray(int[] nums) {\n        int n = nums.length;\n        for(int i = 1; i < n; i++){\n            //记录当前元素\n            int cur = nums[i], j;\n            //从第j=i-1位元素开始，若目标元素大于当前元素，则将目标元素向右移一位，继续比较直到目标元素小于当前元素或到数组首位，此时将当前元素赋给j+1位，可保证(0, j+1)位元素都小于等于当前元素，(j+2, i+1)位元素都大于当前元素，实现元素nums[i]的“插入”\n            //另外为了方便移位，要从大往小遍历，遇到大的将其向后移一位\n            for(j = i-1; j >= 0; j--){\n                if(nums[j]>cur){\n                    nums[j+1] = nums[j];\n                }else{\n                    break;\n                }\n            }\n            nums[j+1] = cur;\n        }\n        return nums;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("h2",{attrs:{id:"二分插入排序"}},[n._v("二分插入排序")]),n._v(" "),s("p",[n._v("在插入的基础上，在寻找插入点时，使用mid来代替从头至尾的遍历，寻找满足条件的左右边界，直到左边界超出有边界，此时左边界即为插入点")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int[] sortArray(int[] nums) {\n        int n = nums.length;\n        for(int i = 1; i < n; i++){\n            //初始左边界和右边界，记录当前元素\n            int left = 0, right = i-1, cur = nums[i];\n            while(right>=left){\n                //记录中间元素\n                int mid = (right+left)/2;\n                //当中间元素大于当前元素，将右边界记为中间-1\n                if(nums[mid]>cur){\n                    right = mid-1;;\n                }else{ //当中间元素小于当前元素，将左边界记为中间+1\n                    left = mid+1;\n                }\n            }\n            for(int j = i; j > left; j--){\n                nums[j] = nums[j-1];\n            }\n            nums[left] = cur;\n        }\n        return nums;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("h2",{attrs:{id:"快速排序"}},[n._v("快速排序")]),n._v(" "),s("p",[n._v("在一个数组中"),s("strong",[n._v("随便")]),n._v("（可以取随机数，可以取中间元素，也可以直接取右边界）找一个元素作为标准，将小于等于该数的元素放在该元素左边，剩余的放在右边，再将该数左边（右边）所有元素作为一个数组重新进行这一过程，直到左边界大于等于右边界直接 return")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int[] sortArray(int[] nums){\n        quickSort(nums, 0, nums.length-1);\n        return nums;\n    }\n\n\n    public void quickSort(int[] nums, int left, int right){\n        if(left>=right){\n            return;\n        }\n        swap(nums, right, (left+right)/2);\n        int pivot = nums[right];\n        int position = left;\n        for(int i = left; i < right; i++){\n            if(nums[i] <= pivot){\n                swap(nums, i, position);\n                position++;\n            }\n        }\n        swap(nums, position, right);\n        quickSort(nums, left, position-1);\n        quickSort(nums, position+1, right);\n    }\n\n    public void swap(int[] nums, int i, int j){\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])]),s("h2",{attrs:{id:"堆排序"}},[n._v("堆排序")]),n._v(" "),s("p",[n._v("满二叉树：除最后一层外的每层上的所有节点都有两个子节点（形状如三角形，叶子分布在同一层），这样自然会导致其深度为 k 时有 2^k-1 个结点")]),n._v(" "),s("p",[n._v("完全二叉树：叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。")]),n._v(" "),s("ul",[s("li",[n._v("满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树")])]),n._v(" "),s("p",[n._v("堆：按顺序储存的完全二叉树。当父节点的键值总是大于等于其子节点的键值，为大根（顶）堆，反之称为小根（顶）堆")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int[] sortArray(int[] nums){\n        heapSort(nums);\n        return nums;\n    }\n\n\n    public void heapSort(int[] nums){\n        int n = nums.length-1; \n        //一定要从后往前构造\n        //这样在树中为从下层向上层构造，逐步将大根上移，防止漏移\n        for(int i = n/2; i >= 0; i--){\n            heapAdjust(nums, i, n);\n        }\n\n        for(int i = n; i > 0; i--){\n            swap(nums, 0, i);\n            heapAdjust(nums, 0, i-1);\n        }\n    }\n\n    public void heapAdjust(int nums[], int parent, int length){\n        int child = parent*2+1;\n        while(child <= length){\n            if(child+1 <= length && nums[child] < nums[child+1]){\n                child++;\n            }\n            if(nums[parent] > nums[child]){\n                break;\n            }\n            swap(nums, parent, child);\n            parent = child;\n            child = parent*2+1;\n        }\n    }\n\n    public void swap(int[] nums, int i, int j){\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br")])]),s("h2",{attrs:{id:"归并排序"}},[n._v("归并排序")]),n._v(" "),s("p",[n._v("利用数组 temp 作为中间转换，将 [ left, mid ] 和 [ mid+1, right ] 的数排序在 temp 里，再将 temp 中的值重新赋给 nums，完成一次排序")]),n._v(" "),s("p",[n._v("Fork/Join 思想")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Solution {\n\n    public int[] sortArray(int[] nums){\n        temp = new int[nums.length];\n        mergeSort(nums, 0, nums.length-1);\n        return nums;\n    }\n\n    private int[] temp;\n\n    public void mergeSort(int[] nums, int left, int right){\n        if(left >= right){\n            return;\n        }\n        int mid = (left+right)/2;\n        mergeSort(nums, left, mid);\n        mergeSort(nums, mid+1, right);\n        int i = left, j = mid+1, count = 0;\n        while(i<=mid && j<=right){\n            if(nums[i]<nums[j]){\n                temp[count++] = nums[i++];\n            }else{\n                temp[count++] = nums[j++];\n            }\n        }\n        while(i<=mid){\n            temp[count++] = nums[i++];\n        }\n        while(j<=right){\n            temp[count++] = nums[j++];\n        }\n        for(int k = 0; k <= right-left; k++){\n            nums[k+left] = temp[k];\n        }\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);