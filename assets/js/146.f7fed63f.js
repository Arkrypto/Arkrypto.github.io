(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{1459:function(n,s,e){"use strict";e.r(s);var a=e(3),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"宽度优先搜索"}},[n._v("宽度优先搜索")]),n._v(" "),s("p",[n._v("Breadth First Search")]),n._v(" "),s("h3",{attrs:{id:"二叉树的层序遍历"}},[n._v("二叉树的层序遍历")]),n._v(" "),s("p",[n._v("力扣 102："),s("a",{attrs:{href:"https://leetcode.cn/problems/binary-tree-level-order-traversal/",target:"_blank",rel:"noopener noreferrer"}},[n._v("二叉树的层序遍历"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[n._v("借助队列这一数据结构辅助实现")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> list = new ArrayList<>();\n        if(root==null){\n            return list;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            List<Integer> row = new ArrayList<>();\n            //记录该层节点个数\n            int n = q.size();\n            for(int i = 0; i < n; i++){\n                //依次出列\n                TreeNode p = q.poll();\n                row.add(p.val);\n                //依次入列，左——>右\n                if(p.left!=null){\n                    q.offer(p.left);\n                }\n                if(p.right!=null){\n                    q.offer(p.right);\n                }\n            }\n            list.add(row);\n        }\n        return list;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br")])]),s("h3",{attrs:{id:"路径总和"}},[n._v("路径总和")]),n._v(" "),s("p",[n._v("力扣 112："),s("a",{attrs:{href:"https://leetcode.cn/problems/path-sum/",target:"_blank",rel:"noopener noreferrer"}},[n._v("路径总和"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    private boolean flag = false;\n\n    public void bfs(TreeNode root, int targetSum){\n        if(root == null){\n            return;\n        }\n        Queue<TreeNode> nodeQue = new LinkedList<>();\n        Queue<Integer> valQue = new LinkedList<>();\n        nodeQue.offer(root);\n        valQue.offer(root.val);\n        while(nodeQue.size() != 0){\n            TreeNode cur = nodeQue.poll();\n            int temp = valQue.poll();\n            if(cur.left == null && cur.right == null){\n                if(temp == targetSum){\n                    flag = true;\n                    break;\n                }\n                continue;\n            }\n            if(cur.left != null){\n                nodeQue.offer(cur.left);\n                valQue.offer(temp + cur.left.val);\n            }\n            if(cur.right != null){\n                nodeQue.offer(cur.right);\n                valQue.offer(temp + cur.right.val);\n            }\n        }\n    }\n\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        bfs(root, targetSum);\n        return flag;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br")])]),s("h3",{attrs:{id:"奇偶树"}},[n._v("奇偶树")]),n._v(" "),s("p",[n._v("力扣 1609："),s("a",{attrs:{href:"https://leetcode.cn/problems/even-odd-tree/",target:"_blank",rel:"noopener noreferrer"}},[n._v("奇偶树"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isEvenOddTree(TreeNode root) {\n        Deque<TreeNode> q = new ArrayDeque<>();\n        q.add(root);\n        int level = 0;\n        while(!q.isEmpty()){\n            int n = q.size();\n            if(level % 2 == 0){\n                int temp = Integer.MIN_VALUE;\n                for(int i = 0; i < n; i++){\n                    TreeNode cur = q.poll();\n                    int val = cur.val;\n                    if(val%2 == 0 || val <= temp){\n                        return false;\n                    }\n                    if(cur.left != null){\n                        q.offer(cur.left);\n                    }\n                    if(cur.right != null){\n                        q.offer(cur.right);\n                    }\n                    temp = val;\n                }\n            } else {\n                int temp = Integer.MAX_VALUE;\n                for(int i = 0; i < n; i++){\n                    TreeNode cur = q.poll();\n                    int val = cur.val;\n                    if(val%2 == 1 || val >= temp){\n                        return false;\n                    }\n                    if(cur.left != null){\n                        q.offer(cur.left);\n                    }\n                    if(cur.right != null){\n                        q.offer(cur.right);\n                    }\n                    temp = val;\n                }\n            }\n            level++;\n        }\n        return true;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br")])]),s("h3",{attrs:{id:"二叉树的右视图"}},[n._v("二叉树的右视图")]),n._v(" "),s("p",[n._v("力扣 199："),s("a",{attrs:{href:"https://leetcode.cn/problems/binary-tree-right-side-view/",target:"_blank",rel:"noopener noreferrer"}},[n._v("二叉树的右视图"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    vector<int> res;\n\n    vector<int> rightSideView(TreeNode* root) {\n        bfs(root);\n        return res;\n    }\n\n    void bfs(TreeNode* node){\n        if(!node){\n            return;\n        }\n        deque<TreeNode*> queue;\n        queue.push_back(node);\n        while(!queue.empty()){\n            res.push_back(queue.back()->val);\n            int n = queue.size();\n            for(int i = 0; i < n; i++){\n                TreeNode* cur = queue.front();\n                if(cur->left) { queue.push_back(cur->left); }\n                if(cur->right) { queue.push_back(cur->right); }\n                queue.pop_front();\n            }\n        }        \n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br")])]),s("p",[n._v("和这道题解题方式很像，"),s("a",{attrs:{href:"https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/?envType=study-plan&id=suan-fa-ji-chu&plan=algorithms&plan_progress=4g9kt0m",target:"_blank",rel:"noopener noreferrer"}},[n._v("117. 填充每个节点的下一个右侧节点指针 II - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("都是层序遍历，特殊处理每层的最后一个节点")]),n._v(" "),s("h3",{attrs:{id:"二进制矩阵中的最短路径"}},[n._v("二进制矩阵中的最短路径")]),n._v(" "),s("p",[n._v("力扣 1091："),s("a",{attrs:{href:"https://leetcode.cn/problems/shortest-path-in-binary-matrix/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("二进制矩阵中的最短路径 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("层层推进寻找解")]),n._v(" "),s("li",[n._v("若用 dfs 很有可能漏掉最优解，因为在遍历到次解时标记了优解被访问")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        if(grid[0][0] == 1){\n            return -1;\n        }\n        int m = grid.size();\n        if(m == 1){\n            return 1;\n        }\n        deque<pair<int,int>> queue;\n        queue.push_back(make_pair(0, 0));\n        grid[0][0] = 1;\n        int res = 1;\n        while(!queue.empty()){\n            int n = queue.size();\n            for(int k = 0; k < n; k++){\n                pair<int,int> cur = queue.front();\n                queue.pop_front();\n                int i = cur.first, j = cur.second;\n                for(int l = i-1; l <= i+1; l++){\n                    for(int r = j-1; r <= j+1; r++){\n                        if(l < 0 || l >= m || r < 0 || r >= m){\n                            continue;\n                        }\n                        if(l == m-1 && r == m-1 && !grid[l][r]){\n                            return res+1;\n                        }\n                        if(!grid[l][r]){\n                            queue.push_back(make_pair(l, r));\n                            grid[l][r] = 1;\n                        }\n                    }\n                }\n            }\n            res++;\n        }\n        return -1;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br")])]),s("h2",{attrs:{id:"dijkstra-算法"}},[n._v("Dijkstra 算法")]),n._v(" "),s("p",[n._v("BFS 算法的扩展，在广度优先搜索的基础上，加上了一个访问表和距离表")]),n._v(" "),s("ul",[s("li",[n._v("访问表：标记节点是否被访问，节点不会被重复访问，每个被访问的节点都认为其距离初始点的最短距离已经被确认")]),n._v(" "),s("li",[n._v("距离表：记录当前状态下，每个节点到初始点的距离，无法到达则为 INT_MAX")])]),n._v(" "),s("p",[n._v("每一次处理，外层遍历先将当前所有节点中距离初始点最近的节点找出，并将这个距离视作其离初始点的最近距离，标记为已访问"),s("code",[n._v("visited[cur] = true, dist[cur] = distance(start, cur)")])]),n._v(" "),s("p",[n._v("内层遍历所有当前节点 cur 能访问到的节点 i（或所有暂未访问过的节点），更新他们距离初始点的最短距离"),s("code",[n._v("dist[i] = min(dist[i], dist[cur] + distance(cur, i))")])]),n._v(" "),s("p",[n._v("直到每个节点均被访问，那么所有节点距离初始点的最短长度均被确定，退出算法，得到完整的"),s("code",[n._v("dist[]")]),n._v("数组，即为结果")]),n._v(" "),s("h3",{attrs:{id:"网络延迟时间"}},[n._v("网络延迟时间")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/network-delay-time/",target:"_blank",rel:"noopener noreferrer"}},[n._v("743. 网络延迟时间 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("求图中距离起点"),s("strong",[n._v("加权路径")]),n._v("最长的距离")]),n._v(" "),s("ul",[s("li",[n._v("这里为了使脑子想的舒服，"),s("code",[n._v("graph[i][j]")]),n._v("即为节点 i 到节点 j 的距离，而节点编号是从 1 开始的，"),s("code",[n._v("graph[0]")]),n._v("和"),s("code",[n._v("visited[0]")]),n._v("都被浪费")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n        int m = n+1;\n        vector<int> dist(m, INT_MAX/2);\n        // 构造图\n        vector<vector<int>> graph(m, vector<int>(m, INT_MAX/2));\n        for(auto& edge: times){\n            int cur = edge[0], next = edge[1], length = edge[2];\n            graph[cur][next] = length;\n        }\n\n        // 记录节点是否访问\n        vector<int> visited(m, 0);\n        // 初始化第一个访问节点\n        dist[k] = 0;\n        // 开始遍历\n        for(int i = 1; i <= n; i++){\n            int cur = -1;\n            for(int j = 1; j <= n; j++){\n                // 忽略已访问节点，对于未访问节点进行比较，找到当前为访问中离初始点最近的点\n                if(!visited[j] && (cur == -1 || dist[j] < dist[cur])){\n                    cur = j;\n                }\n            }\n            // 找到离初始点最近的一个节点，以此为基础向外扩展，确定各点离初始点的最近距离\n            visited[cur] = true;\n            for(int j = 1; j <= n; j++){\n                if(graph[cur][j] == INT_MAX/2){\n                    continue;\n                }\n                dist[j] = min(dist[j], dist[cur] + graph[cur][j]);\n            }\n\n        }\n        int res = *max_element(dist.begin()+1, dist.end());\n        return res == INT_MAX/2 ? -1 : res;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br")])]),s("h3",{attrs:{id:"最小体力消耗路径"}},[n._v("最小体力消耗路径")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/path-with-minimum-effort/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("1631. 最小体力消耗路径 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("图中，起点到终点的路径中，记录每个相邻点的距离差（每个点均可以上下左右相邻移动），路径中最大的距离差记为该路径的消耗，找到从起点到终点消耗最小的一条路径并且返回其消耗值大小")]),n._v(" "),s("p",[n._v("很朴素的解法：严格遵守 Dijkstra 算法")]),n._v(" "),s("ul",[s("li",[n._v("维护一个数组"),s("code",[n._v("dist[m*n]")]),n._v("，记录每个节点的最小的消耗值，初始化所有值为"),s("code",[n._v("INT_MAX/2, dist[0] = 0")])]),n._v(" "),s("li",[n._v("每一轮找到"),s("strong",[n._v("消耗值最小且未被访问的节点")]),n._v("，记为当前节点，标记为已访问，进行扩展")]),n._v(" "),s("li",[n._v("向四方扩展，扩展规则如下\n"),s("ul",[s("li",[n._v("首先取扩展节点的消耗值和相邻差的较小值，记为扩展结点值")]),n._v(" "),s("li",[n._v("再取当前节点值和扩展结点值的较大值，赋予扩展结点")])])]),n._v(" "),s("li",[n._v("直到终点被访问，退出循环，返回"),s("code",[n._v("dist.back()")])])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\nprivate:\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\npublic:\n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int m = heights.size(), n = heights[0].size();   \n        int lim = INT_MAX / 2;\n        vector<int> visited(m*n, false);\n        vector<int> dist(m*n, lim);\n        dist[0] = 0;\n        while(!visited[m*n-1]){\n            int x = -1, y = -1;\n            int shortest = lim;\n            for(int i = 0; i < m*n; i++){\n                if(visited[i]){\n                    continue;\n                }\n                if(dist[i] < shortest){\n                    x = i/n; y = i%n;\n                    shortest = dist[i];\n                }\n            }\n            if(x == -1 || y == -1){\n                break;\n            }\n            visited[x*n+y] = true;\n            for(int i = 0; i < 4; i++){\n                int nx = x + dirs[i][0];\n                int ny = y + dirs[i][1];\n                if(nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx*n+ny]){\n                    dist[nx*n+ny] = max(dist[x*n+y],\n                                    min(dist[nx*n+ny], abs(heights[nx][ny]-heights[x][y])));\n                }\n            }\n        }\n        return dist.back();\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br")])]),s("p",[n._v("但是这样朴素的 Dijkstra 并不得到认可，因为遍历寻找最小值太慢了，所以要用到优先队列，但是很几把蠢")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\nprivate:\n    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\npublic:\n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int m = heights.size(), n = heights[0].size();   \n        int lim = INT_MAX / 2;\n        vector<int> visited(m*n, false);\n        vector<int> dist(m*n, lim);\n\n        auto cmp = [](const vector<int>& a, const vector<int>& b){\n            return a[2] > b[2];\n        };\n        priority_queue<vector<int>, vector<vector<int>>, decltype(cmp)> queue(cmp);\n        queue.push({0,0,0});\n        \n        dist[0] = 0;\n        while(!queue.empty()){\n            vector<int> cur = queue.top();\n            queue.pop();\n            int x = cur[0], y = cur[1];\n            if(x == -1 || y == -1){ break; }\n            visited[x*n+y] = true;\n            for(int i = 0; i < 4; i++){\n                int nx = x + dirs[i][0];\n                int ny = y + dirs[i][1];\n                if(nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx*n+ny]\n                   && max(dist[x*n+y], abs(heights[nx][ny]-heights[x][y])) < dist[nx*n+ny]){\n                    dist[nx*n+ny] = max(dist[x*n+y], abs(heights[nx][ny]-heights[x][y]));\n                    queue.push({nx, ny, dist[nx*n+ny]});\n                }\n            }\n        }\n        return dist[m*n-1];\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br")])]),s("h3",{attrs:{id:"概率最大的路径"}},[n._v("概率最大的路径")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/path-with-maximum-probability/",target:"_blank",rel:"noopener noreferrer"}},[n._v("1514. 概率最大的路径 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("普通每轮枚举找到最大权重路径，向下扩展，11/18 超时")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    // 判断终点是否可达，BFS\n    bool reachable(vector<vector<int>>& edges, int start, int end){\n        int n = edges.size();\n        vector<int> visited(n, false);\n        deque<int> queue;\n        queue.push_back(start);\n        while(!queue.empty()){\n            int cur = queue.front();\n            queue.pop_front();\n            if(cur == end){\n                return true;\n            }\n            for(int i = 0; i < n; i++){\n                if(visited[i]){\n                    continue;\n                }\n                if(edges[i][0] == cur || edges[i][1] == cur){\n                    visited[i] = true;\n                    int next = edges[i][0] == cur ? edges[i][1] : edges[i][0];\n                    queue.push_back(next);\n                }\n            }\n        }\n        return false;\n    }\n\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        if(!reachable(edges, start, end)){\n            return 0;\n        }\n        int m = edges.size();\n        vector<double> dist(n, 0);\n        vector<int> visited(n, false);\n        dist[start] = 1;\n        while(!visited[end]){\n            int cur = -1;\n            double max = 0;\n            // 枚举选取当前最大节点，进行后续扩展\n            for(int i = 0; i < n; i++){\n                if(visited[i]){\n                    continue;\n                }\n                if(dist[i] > max){\n                    max = dist[i];\n                    cur = i;\n                }\n            }\n            visited[cur] = true;\n            for(int i = 0; i < m; i++){\n                if(edges[i][0] == cur || edges[i][1] == cur){\n                    int next = edges[i][0] == cur ? edges[i][1] : edges[i][0];\n                    dist[next] = dist[next] > dist[cur]*succProb[i] ? dist[next] : dist[cur]*succProb[i];\n                }\n            }\n        }\n        return dist[end];\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br")])]),s("p",[n._v("用优先队列优化了枚举当前扩展的节点的过程，还是过不了 11/18")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        int m = edges.size();\n\n        vector<vector<double>> graph(n, vector<double>(n, 0));\n        for(int i = 0; i < m; i++){\n            int x = edges[i][0], y = edges[i][1];\n            graph[x][y] = succProb[i];\n            graph[y][x] = succProb[i];\n        }\n\n        static vector<double> dist;\n        dist = vector<double>(n, 0);\n        dist[start] = 1;\n        \n        vector<int> visited(n, 0);\n\n        auto cmp = [](const int& a, const int& b){\n            return dist[a] < dist[b];\n        };\n        priority_queue<int, vector<int>, decltype(cmp)> queue(cmp);\n        queue.push(start);\n\n        while(!visited[end] && !queue.empty()){\n            int cur = queue.top();\n            queue.pop();\n            if(visited[cur]){\n                continue;\n            }\n            visited[cur] = true;\n            vector<double> wights = graph[cur];\n            for(int i = 0; i < n; i++){\n                if(wights[i] == 0 || visited[i]){\n                    continue;\n                }\n                int next = i;\n                dist[next] = max(dist[next], dist[cur]*wights[i]);\n                queue.push(next);\n            }\n        }\n        return dist[end];\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);