(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{1481:function(n,s,a){"use strict";a.r(s);var e=a(3),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"一般动态规划"}},[n._v("一般动态规划")]),n._v(" "),s("blockquote",[s("p",[n._v("dynamic programming")])]),n._v(" "),s("h3",{attrs:{id:"最大子数组和"}},[n._v("最大子数组和")]),n._v(" "),s("p",[n._v("力扣 53："),s("a",{attrs:{href:"https://leetcode.cn/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[n._v("最大子数组和"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class MaxSumSubArray {\n    public int maxSubArray(int[] nums) {\n        int n = nums.length;\n        int[] f = new int[n];\n        f[0] = nums[0];\n        //动态规划\n        //当前者和大于0，将其状态转移到后者\n        //当前者和小于0，放弃掉前者和，重新计算最大和，即重新进行转移\n        //对和的数组排序，返回其最大和\n        for(int i = 1; i < n; i++){\n            if(f[i-1] > 0){\n                f[i] += f[i-1] + nums[i];\n            }\n            else{\n                f[i] = nums[i];\n            }\n        }\n        Arrays.sort(f);\n        return f[n-1];\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("h3",{attrs:{id:"解码方法"}},[n._v("解码方法")]),n._v(" "),s("p",[n._v("力扣 91："),s("a",{attrs:{href:"https://leetcode.cn/problems/decode-ways/",target:"_blank",rel:"noopener noreferrer"}},[n._v("解码方法"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//动态规划：状态转移方程\npublic class NumDecodings {\n    public int decodings(String s) {\n\n        int n = s.length();\n        int f[] = new int[n+1];\n        f[0] = 1;\n        //该在for循环中++i和i++等价\n        for(int i = 1; i < n+1; i++) {\n            f[i] = 0;\n            //状态转移方程1\n            //其实在12行不初始化，f[i]也默认为0\n            if(s.charAt(i-1) != '0') {\n                f[i] += f[i-1];\n            }    \n            //状态转移方程2\n            //转换类型，判断两位数是否 <= 26\n            if(i > 1 && s.charAt(i-2) != '0' && (s.charAt(i-2)-'0')*10 + (s.charAt(i-1)-'0') <= 26) {\n                f[i] += f[i-2];\n            }            \n        }\n        return f[n];\n    }\n\n\n    public static void main(String[] args) {\n        NumDecodings nd = new NumDecodings();\n        String str = \"226712\";\n        System.out.println(nd.decodings(str));\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])]),s("h3",{attrs:{id:"最长回文子串"}},[n._v("最长回文子串")]),n._v(" "),s("p",[n._v("力扣 5："),s("a",{attrs:{href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"}},[n._v("最长回文子串"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//当s[i]==s[j]，dp[i][j]是否回文取决于dp[i+1][j-1]是否回文\n//所以用boolean数组dp[i][j]记录回文子串s[i]到s[j]的状态\n//第一步初始化dp[i][i]=true，即单个字符均回文\n//Len为子串长度，i为左边界，j为右边界\n\nclass Solution {\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        if(n<2){\n            return s;\n        }\n        boolean[][] dp = new boolean[n][n];\n        for(int i = 0; i < n; i++){\n            dp[i][i] = true;\n        }\n        int maxLength = 1;\n        int begin = 0;\n        for(int Len = 2; Len <= n; Len++){\n            for(int i = 0; i < n; i++){\n                int j = i+Len-1;            \n                if(j>=n){\n                    break;\n                }\n                if(s.charAt(i)==s.charAt(j)){\n                    if(j-i<3){\n                        dp[i][j] = true;\n                    }else{\n                        dp[i][j] = dp[i+1][j-1];\n                    }\n                }else{\n                    dp[i][j] = false;\n                }\n                if(dp[i][j] && j-i+1>maxLength){\n                    begin = i;\n                    maxLength = j-i+1;\n                }\n            }\n        }\n        return s.substring(begin, begin+maxLength);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br")])]),s("h3",{attrs:{id:"回文子串"}},[n._v("回文子串")]),n._v(" "),s("p",[n._v("力扣 647："),s("a",{attrs:{href:"https://leetcode.cn/problems/palindromic-substrings/",target:"_blank",rel:"noopener noreferrer"}},[n._v("回文子串"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int countSubstrings(String s) {\n        int n = s.length(), count = 0;\n        boolean dp[][] = new boolean[n][n];\n        for(int i = 0; i < n; i++){\n            dp[i][i] = true;\n        }\n        for(int Len = 2; Len <= n; Len++){\n            for(int i = 0; i < n; i++){\n                int j = i+Len-1;\n                if(j>=n){\n                    break;\n                }\n                if(s.charAt(i)==s.charAt(j)){\n                    if(Len <= 3){\n                        dp[i][j] = true;\n                    }else{\n                        dp[i][j] = dp[i+1][j-1];\n                    }\n                }else{\n                    dp[i][j] = false;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(dp[i][j]){\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br")])]),s("h3",{attrs:{id:"最长递增子序列"}},[n._v("最长递增子序列")]),n._v(" "),s("p",[n._v("力扣 300："),s("a",{attrs:{href:"https://leetcode.cn/problems/longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[n._v("最长递增子序列"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[n._v("用 dp[i] 记录第 i 个元素能构成的递增子序列大小：初始化为 1，对小于 i 的元素遍历，若当前元素大于 nums[j]，则 dp[i] = dp[j]+1，此为状态转移方程")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n        if(n == 0){\n            return 0;\n        }\n        int maxLength = 1;\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for(int i = 1; i < n; i++){\n            dp[i] = 1;\n            for(int j = 0; j < i; j++){               \n                if(nums[i] > nums[j]){\n                    dp[i] = Math.max(dp[i], dp[j]+1);\n                }\n            }\n            maxLength = Math.max(dp[i], maxLength);\n        }\n        return maxLength;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("h3",{attrs:{id:"消除游戏"}},[n._v("消除游戏")]),n._v(" "),s("p",[n._v("力扣 390："),s("a",{attrs:{href:"https://leetcode.cn/problems/elimination-game/",target:"_blank",rel:"noopener noreferrer"}},[n._v("消除游戏"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[s("code",[n._v("1 2 3 4 5 6 7 8 9")])]),n._v(" "),s("p",[n._v("消除一轮:"),s("code",[n._v("2 4 6 8")]),n._v("（从头开始消除单数序号的数）")]),n._v(" "),s("p",[n._v("消除二轮:"),s("code",[n._v("2 6")]),n._v("（从尾开始消除单数序号的数）")]),n._v(" "),s("p",[n._v("消除三轮:"),s("code",[n._v("6 ——> 最终结果")]),n._v("（从头消除单数序号）")]),n._v(" "),s("p",[n._v("先从最简单的情况入手：n=1时，答案为1。n=2时，答案为2。")]),n._v(" "),s("p",[n._v("可以发现，答案一定不会是奇数，因为第一轮操作一定会将所有的奇数删除。这就提示出一个规律：\n如果n为奇数，那么以n结尾和以n-1结尾是完全一样的。\n例如1,2,3,4,5,6,7,8,9，操作一轮后剩2,4,6,8，下一轮从8开始；\n而1,2,3,4,5,6,7,8，操作一轮后也剩2,4,6,8，下一轮也从8开始。\n从而得到第一个递推公式：当n为奇数时，"),s("code",[n._v("dp[n] = dp[n-1]")]),n._v(";")]),n._v(" "),s("p",[n._v("2.3 接下来就只剩n为偶数的情况了。\n仍以1,2,3,4,5,6,7,8为例，操作一轮后剩2,4,6,8， 下一轮从8开始。\n那么2,4,6,8从8开始，和2,4,6,8从2开始有什么区别呢？\n很明显就是轴对称的关系，前者剩6，后者就剩(8+2 - 6);")]),n._v(" "),s("p",[n._v("那么2,4,6,8从2开始，和1,2,3,4从1开始有什么区别呢？\n这个关系更明显，就是2倍的关系。")]),n._v(" "),s("p",[n._v("写到这里，大家应该明白了，1,2,3,4从1开始不就是"),s("code",[n._v("dp[4]")]),n._v("吗！\n也就是说，"),s("code",[n._v("dp[8] = 2*(1+4-dp[4])")]),n._v(" 这里的"),s("code",[n._v("1+4-dp[4]")]),n._v("起的就是轴对称的作用。\n推而广之，n为偶数时，"),s("code",[n._v("dp[n] = 2*(1+n/2-dp[n/2])")]),n._v("\n这样完整的递推公式就完成了：\nn为奇数时，"),s("code",[n._v("dp[n] = dp[n-1]")]),n._v("\nn为偶数时，"),s("code",[n._v("dp[n] = 2(1+n/2-dp[n/2])")])])]),n._v(" "),s("p",[n._v("由于"),s("code",[n._v("dp[1000000]")]),n._v("超出内存限制，采用递归的写法，思路一样，只是未构造dp数组")]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n\n    public int dp(int n){\n        if(n == 1){\n            return 1;\n        }\n        if(n == 2){\n            return 2;\n        }\n        if(n % 2 == 1){\n            return dp(n-1);\n        }\n        if(n % 2 == 0){\n            return 2*(1+n/2-dp(n/2));\n        }\n        return -1;\n    }\n\n    public int lastRemaining(int n) {\n        return dp(n);\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br")])]),s("h3",{attrs:{id:"猫和老鼠"}},[n._v("猫和老鼠")]),n._v(" "),s("p",[n._v("力扣 913："),s("a",{attrs:{href:"https://leetcode.cn/problems/cat-and-mouse/",target:"_blank",rel:"noopener noreferrer"}},[n._v("猫和老鼠"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[n._v("数据结构：无向图")]),n._v(" "),s("p",[n._v("算法：动态规划、深度优先搜索、递归")]),n._v(" "),s("p",[n._v("算尽从初始点穷尽努力的结果，没有变数")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package com.solution;\n\nimport java.util.Arrays;\n\npublic class MouseCatGame {\n\n    private static final int catWin = 2;\n    private static final int draw = 0;\n    private static final int mouseWin = 1;\n\n    private int n;\n    private int[][][] dp;\n    private int[][] graph;\n\n    public int mouseCatGame(int[][] graph){\n        n = graph.length;\n        dp = new int[n][n][2*n];\n        for(int[][] i: dp){\n            for(int[] j: i){\n                Arrays.fill(j, -1);\n            }\n        }\n        this.graph = graph;\n        return getRes(1, 2, 0);\n    }\n\n    public int getRes(int mouse, int cat, int steps){\n        if(steps >= 2*n){\n            return draw;\n        }\n        if(dp[mouse][cat][steps] < 0){\n            if(mouse == 0){\n                dp[mouse][cat][steps] = mouseWin;\n            } else if(mouse == cat){\n                dp[mouse][cat][steps] = catWin;\n            } else{\n                getNextRes(mouse, cat, steps);\n            }\n        }\n        return dp[mouse][cat][steps];\n    }\n\n    public void getNextRes(int mouse, int cat, int steps){\n        int curMove = steps%2 == 0 ? mouse:cat;\n        int defaultRes = curMove==mouse ? catWin:mouseWin;\n        int res = defaultRes;\n        for(int nextStep: graph[curMove]){\n            if(curMove == cat && nextStep == 0){\n                continue;\n            }\n            int mouseNextStep = curMove==mouse ? nextStep:mouse;\n            int catNextStep = curMove==cat ? nextStep:cat;\n            int nextRes = getRes(mouseNextStep, catNextStep, steps+1);\n            if(nextRes != defaultRes){\n                res = nextRes;\n                if(res != draw){\n                    break;\n                }\n            }\n        }\n        dp[mouse][cat][steps] = res;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br")])]),s("h3",{attrs:{id:"最长递增子序列的个数"}},[n._v("最长递增子序列的个数")]),n._v(" "),s("p",[n._v("力扣 673："),s("a",{attrs:{href:"https://leetcode.cn/problems/number-of-longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[n._v("最长递增子序列的个数"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[s("code",[n._v("dp[i]")]),n._v("记录下标"),s("code",[n._v("i")]),n._v("元素能构成的最长递增子序列的长度")]),n._v(" "),s("p",[s("code",[n._v("count[i]")]),n._v("记录下标"),s("code",[n._v("i")]),n._v("元素构成最长递增子序列的道路总数")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package com.solution;\n\nimport java.util.Arrays;\n\n//1073741824\npublic class FindNumberOfLIS {\n    private int[] dp;\n    private int[] count;\n\n    public int buildDp(int[] nums){\n        int n = nums.length;\n        dp = new int[n];\n        count = new int[n];\n        int maxLength = 1;\n        for(int i = 0; i < n; i++){\n            dp[i] = 1;\n            count[i] = 1;\n            for(int j = 0; j < n; j++){\n                if(nums[j] < nums[i]){\n                    if(dp[j] >= dp[i]){\n                        dp[i] = dp[j]+1;\n                        //重置计数\n                        count[i] = count[j];\n                    } else if(dp[i] == dp[j]+1){\n                        count[i] += count[j];\n                    }\n                }\n            }\n            maxLength = Math.max(maxLength, dp[i]);\n        }\n        return maxLength;\n    }\n\n    public int findNumberOfLIS(int[] nums){\n        int res = 0;\n        int n = nums.length;\n        int maxLength = buildDp(nums);\n        if(maxLength == 1){\n            return n;\n        }\n        for(int i = 1; i < n; i++){\n            if(dp[i] == maxLength){\n                res += count[i];\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        FindNumberOfLIS findNumberOfLIS = new FindNumberOfLIS();\n        int[] nums = {0,2,1,4,3,6,5,8,7,10,9,12,11,14,13,16,15,18,17,20,19,22,21,24,23,26,25,28,27,30,29,32,31,34,33,36,35,38,37,40,39,42,41,44,43,46,45,48,47,50,49,52,51,54,53,56,55,58,57,60,59,61};\n        System.out.println(findNumberOfLIS.findNumberOfLIS(nums));\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br")])]),s("h3",{attrs:{id:"统计元音字母序列的数目"}},[n._v("统计元音字母序列的数目")]),n._v(" "),s("p",[n._v("力扣 1220："),s("a",{attrs:{href:"https://leetcode.cn/problems/count-vowels-permutation/",target:"_blank",rel:"noopener noreferrer"}},[n._v("统计元音字母序列的数目"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("字符串中的每个字符都应当是小写元音字母（"),s("code",[n._v("a, e, i, o, u")]),n._v("）\n每个元音"),s("code",[n._v("a")]),n._v("后面都只能跟着"),s("code",[n._v("e")]),n._v("\n每个元音"),s("code",[n._v("e")]),n._v("后面只能跟着"),s("code",[n._v("a")]),n._v("或者是"),s("code",[n._v("i")]),n._v("\n每个元音"),s("code",[n._v("i")]),n._v("后面 不能 再跟着另一个"),s("code",[n._v("i")]),n._v("\n每个元音"),s("code",[n._v("o")]),n._v("后面只能跟着"),s("code",[n._v("i")]),n._v("或者是"),s("code",[n._v("u")]),n._v("\n每个元音"),s("code",[n._v("u")]),n._v("后面只能跟着"),s("code",[n._v("a")])]),n._v(" "),s("blockquote",[s("p",[n._v("动态规划，"),s("code",[n._v("dp[i][j]")]),n._v("表示长度为"),s("code",[n._v("i")]),n._v("、以"),s("code",[n._v("j")]),n._v("结尾的元音字母序列的数目")]),n._v(" "),s("p",[n._v("其中"),s("code",[n._v("j=0—>a, j=1->e, j=2->i, j=3->o, j=4->u")])])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    public int countVowelPermutation(int n) {\n        int mod = 1000000007;\n        long[] dp = new long[5];\n        long[] next = new long[5];\n        //初始化dp[1][i]\n        for(int i = 0; i < 5; i++){\n            dp[i] = 1;\n        }\n        //通过dp[cur][i]逐步构造dp[next][i]\n        for(int i = 2; i <= n; i++){\n            next[0] = (dp[1]+dp[2]+dp[4]) % mod;\n            next[1] = (dp[0]+dp[2]) % mod;\n            next[2] = (dp[1]+dp[3]) % mod;\n            next[3] = dp[2];\n            next[4] = (dp[2]+dp[3]) % mod;\n            System.arraycopy(next, 0, dp, 0, 5);\n        }\n        //至此dp[n][i]构造完毕，直接将五种序列（根据末尾区分）数目相加即可\n        long ans = 0;\n        for(int i = 0; i < 5; i++){\n            ans = (dp[i]+ans) % mod;\n        }\n        return (int)ans;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("h3",{attrs:{id:"猫和老鼠-2"}},[n._v("猫和老鼠")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/cat-and-mouse/",target:"_blank",rel:"noopener noreferrer"}},[n._v("913. 猫和老鼠 - 力扣（LeetCode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("维护一个三维数组"),s("code",[n._v("dp[mouse_pos][cat_pos][result]")]),n._v("，储存鼠、猫位置对应的游戏结果")]),n._v(" "),s("ul",[s("li",[n._v("初始化：当猫鼠位置重合，猫获胜；当鼠在节点0，猫在任意节点，鼠获胜")]),n._v(" "),s("li",[n._v("对于每个状态进行深度优先搜索，递归完善这个三维数组")]),n._v(" "),s("li",[n._v("最后返回"),s("code",[n._v("dp[1][2]")]),n._v("，即为游戏结果")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package com.solution;\n\nimport java.util.Arrays;\n\npublic class MouseCatGame {\n\n    // 结果状态\n    //猫获胜\n    private static final int catWin = 2;\n    //平局\n    private static final int draw = 0;\n    //鼠获胜\n    private static final int mouseWin = 1;\n\n    //节点数\n    private int n;\n    //储存猫鼠节点以及对应结果\n    private int[][][] dp;\n    // 储存地图\n    private int[][] graph;\n    \n    //开始游戏\n    public int mouseCatGame(int[][] graph){\n        n = graph.length;\n        dp = new int[n][n][2*n];\n        //初始化dp数组，令结果全为-1，即没有结果\n        for(int[][] i: dp){\n            for(int[] j: i){\n                Arrays.fill(j, -1);\n            }\n        }\n        this.graph = graph;\n        return getRes(1, 2, 0);\n    }\n\t\n    //获取当前结果\n    public int getRes(int mouse, int cat, int steps){\n        //当移动步数大于2*n时，说明绝对有重复的步骤，直接返回平局0\n        if(steps >= 2*n){\n            return draw;\n        }\n        //当当前节点为-1，即没有结果\n        if(dp[mouse][cat][steps] < 0){\n            //若老鼠在洞里，返回老鼠获胜1\n            if(mouse == 0){\n                dp[mouse][cat][steps] = mouseWin;\n            } else if(mouse == cat){//若猫鼠位置重合，返回猫获胜2\n                dp[mouse][cat][steps] = catWin;\n            } else{//否则进入深度优先搜索\n                getNextRes(mouse, cat, steps);\n            }\n        }\n        return dp[mouse][cat][steps];\n    }\n\n    public void getNextRes(int mouse, int cat, int steps){\n        //判断当前是谁在移动\n        int curMove = steps%2 == 0 ? mouse:cat;\n        int defaultRes = curMove==mouse ? catWin:mouseWin;\n        int res = defaultRes;\n        //遍历可以移动的节点\n        for(int nextStep: graph[curMove]){\n            if(curMove == cat && nextStep == 0){\n                continue;\n            }\n            int mouseNextStep = curMove==mouse ? nextStep:mouse;\n            int catNextStep = curMove==cat ? nextStep:cat;\n            //进入下一层dfs\n            int nextRes = getRes(mouseNextStep, catNextStep, steps+1);\n            if(nextRes != defaultRes){\n                res = nextRes;\n                if(res != draw){\n                    break;\n                }\n            }\n        }\n        dp[mouse][cat][steps] = res;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br"),s("span",{staticClass:"line-number"},[n._v("69")]),s("br"),s("span",{staticClass:"line-number"},[n._v("70")]),s("br"),s("span",{staticClass:"line-number"},[n._v("71")]),s("br"),s("span",{staticClass:"line-number"},[n._v("72")]),s("br"),s("span",{staticClass:"line-number"},[n._v("73")]),s("br"),s("span",{staticClass:"line-number"},[n._v("74")]),s("br"),s("span",{staticClass:"line-number"},[n._v("75")]),s("br"),s("span",{staticClass:"line-number"},[n._v("76")]),s("br"),s("span",{staticClass:"line-number"},[n._v("77")]),s("br"),s("span",{staticClass:"line-number"},[n._v("78")]),s("br"),s("span",{staticClass:"line-number"},[n._v("79")]),s("br")])]),s("p",[n._v("数组总和Ⅳ（377）")]),n._v(" "),s("p",[n._v("矩阵区域不超过k的最大数值和（363）")]),n._v(" "),s("p",[n._v("最小操作次数使数组元素相等（453）")]),n._v(" "),s("h2",{attrs:{id:"kmp"}},[n._v("KMP")]),n._v(" "),s("p",[n._v("Knuth-Morris-Pratt")]),n._v(" "),s("h3",{attrs:{id:"已知-next-数组匹配字符串"}},[n._v("已知 next 数组匹配字符串")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('#include <iostream>\n#include <string.h>\n#include <algorithm> \nusing namespace std;\n\n\nint main(){\n\n    char str[1000];\n    char dist[1000];\n    cin >> str >> dist;\n\n    //cout << str << " " << dist << endl;\n    int count = 0, m = strlen(str), n = strlen(dist);\n    int pos[m];\n\n\n    int next[n];\n    for(int i = 0; i < n; i++){\n        cin >> next[i];\n    }\n\n\n\n    //cout << m << " " << n << endl;\n    int i = 0, j = 0;\n    while(i < m && j < n){\n        if(j == -1 || tolower(str[i])==tolower(dist[j])){\n            i++;\n            j++;\n        } else {\n            j = next[j];\n        }\n        if(j == n){\n            pos[count++] = i-j+1;\n            i = i-1-next[j-1];\n            j = 0;\n        }        \n    }\n\n\n    cout << count << endl;\n    for(i = 0; i < count; i++){\n        cout << pos[i] << endl;\n    }\n\n    return 0;\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br")])]),s("p",[n._v("实现strStr()（28）")]),n._v(" "),s("p",[n._v("重复叠加字符串匹配（686）")]),n._v(" "),s("p",[n._v("重复的子字符串（459）")]),n._v(" "),s("p",[n._v("最短回文串（214）")]),n._v(" "),s("h2",{attrs:{id:"前缀和"}},[n._v("前缀和")]),n._v(" "),s("blockquote",[s("p",[n._v("ProfixSum")])]),n._v(" "),s("h3",{attrs:{id:"区域和检索-数组不可变"}},[n._v("区域和检索-数组不可变")]),n._v(" "),s("p",[n._v("力扣 303："),s("a",{attrs:{href:"https://leetcode.cn/problems/range-sum-query-immutable/",target:"_blank",rel:"noopener noreferrer"}},[n._v("区域和检索 - 数组不可变"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//优化解法：前缀和\nclass NumArray {\n\n    private int[] nums;\n\n    public NumArray(int[] nums) {\n        int n = nums.length;\n        this.nums = new int[n+1];\n        for(int i = 0; i < n; i++){\n            //储存前 i 个的和在数组 this.nums 中，用 nums[j+1]-nums[i] 可以得到第i个数到第j个数的和\n            this.nums[i+1] = this.nums[i] + nums[i];\n        }\n    }\n\n    public int sumRange(int left, int right) {\n        int res = nums[right + 1] - nums[left]; \n        return res;\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * int param_1 = obj.sumRange(left,right);\n */\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("h3",{attrs:{id:"二维区域和检索-矩阵不可变"}},[n._v("二维区域和检索-矩阵不可变")]),n._v(" "),s("p",[n._v("力扣 304："),s("a",{attrs:{href:"https://leetcode.cn/problems/range-sum-query-2d-immutable/",target:"_blank",rel:"noopener noreferrer"}},[n._v("二维区域和检索 - 矩阵不可变"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("//采用303的优化解法：一维前缀和\nclass NumMatrix {\n\n    private int[][] matrix;\n\n    public NumMatrix(int[][] matrix) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        this.matrix = new int[m][n+1];\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                this.matrix[i][j+1] = this.matrix[i][j] + matrix[i][j];\n            }\n        }\n    }\n\n    public int sumRegion(int row1, int col1, int row2, int col2) {\n        int res = 0;\n        for(int i = row1; i <= row2; i++){\n            res += matrix[i][col2+1] - matrix[i][col1];\n        }\n        return res;\n    }\n}\n\n/**\n * Your NumMatrix object will be instantiated and called as such:\n * NumMatrix obj = new NumMatrix(matrix);\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\n */\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br")])]),s("h3",{attrs:{id:"和为-k-的子数组"}},[n._v("和为 k 的子数组")]),n._v(" "),s("p",[n._v("力扣 560："),s("a",{attrs:{href:"https://leetcode.cn/problems/subarray-sum-equals-k/",target:"_blank",rel:"noopener noreferrer"}},[n._v("和为 K 的子数组"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("用"),s("code",[n._v("map<int,int>")]),n._v("记录前缀和及其出现次数")]),n._v(" "),s("ul",[s("li",[s("p",[n._v("cur 为当前和，即 sum(0, i)")])]),n._v(" "),s("li",[s("p",[n._v("map 中记录了各个位置 j 的前缀和，即 sum(0, j)")])]),n._v(" "),s("li",[s("p",[n._v("sum(0, i) - sum(0, j) = sum(j, i)，若 sum(j, i) == target，则存在和为 target 的连续子数组（下标从 j 到 i）")])]),n._v(" "),s("li",[s("p",[n._v("同时用 map->second 记录该前缀和出现次数，存在则直接加上 map[pre]")])])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        int n = nums.size();\n        map<int, int> m;\n        m[0] = 1;\n        int count = 0, cur = 0;\n        for(int i = 0; i < n; i++){\n            cur += nums[i];\n            if(m.count(cur-k)){\n                count += m[cur-k];\n            }\n            m[cur]++;\n        }\n        return count;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("p",[n._v("环绕字符串中唯一的子字符串（467）")]),n._v(" "),s("p",[n._v("区间子数组个数（795）")]),n._v(" "),s("p",[n._v("水果成篮（904）")]),n._v(" "),s("p",[n._v("K个不同的整数的子数组（992）")]),n._v(" "),s("p",[n._v("航班预订统计（1109）")]),n._v(" "),s("p",[n._v("连续数组（525）")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/coin-change/",target:"_blank",rel:"noopener noreferrer"}},[n._v("零钱兑换"),s("OutboundLink")],1)]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/integer-break/",target:"_blank",rel:"noopener noreferrer"}},[n._v("整数拆分"),s("OutboundLink")],1)]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"}},[n._v("编辑距离"),s("OutboundLink")],1)]),n._v(" "),s("h2",{attrs:{id:"贪婪算法"}},[n._v("贪婪算法")]),n._v(" "),s("blockquote",[s("p",[n._v("贪心算法，Greedy")])]),n._v(" "),s("h3",{attrs:{id:"买卖股票的最佳时机"}},[n._v("买卖股票的最佳时机")]),n._v(" "),s("p",[n._v("力扣 121："),s("a",{attrs:{href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"}},[n._v("买卖股票的最佳时机"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int pre = prices[0];\n        int res = 0;\n        for(int i = 1; i < prices.size(); i++){\n            int cur = prices[i];\n            if(cur > pre){\n                res = max(res, cur-pre);\n            } else {\n                pre = cur;\n            }\n        }\n        return res;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])]),s("h3",{attrs:{id:"递增的三元子序列"}},[n._v("递增的三元子序列")]),n._v(" "),s("p",[n._v("力扣 334："),s("a",{attrs:{href:"https://leetcode.cn/problems/increasing-triplet-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[n._v("递增的三元子序列"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    bool increasingTriplet(vector<int>& nums) {\n        int n = nums.size();\n        int first = nums[0], second = INT_MAX;\n        for(int i = 1; i < n; i++){\n            if(nums[i] > second){\n                return true;\n            } else if(nums[i] > first){\n                second = nums[i];\n            } else if(nums[i] < first){\n                first = nums[i];\n            }\n        }\n        return false;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("h3",{attrs:{id:"合并区间"}},[n._v("合并区间")]),n._v(" "),s("p",[n._v("力扣 56："),s("a",{attrs:{href:"https://leetcode.cn/problems/merge-intervals/",target:"_blank",rel:"noopener noreferrer"}},[n._v("合并区间"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        vector<vector<int>> res;\n        sort(intervals.begin(), intervals.end());\n        for(int i = 0; i < intervals.size(); i++){\n            vector<int> cur = intervals[i];\n            if(res.empty() || cur[0] > res.back()[1]){\n                res.push_back(cur);\n            }\n            if(cur[1] > res.back()[1]){\n                res.back()[1] = cur[1];\n            }\n        }\n        return res;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("h3",{attrs:{id:"无重叠区间"}},[n._v("无重叠区间")]),n._v(" "),s("p",[n._v("力扣 435："),s("a",{attrs:{href:"https://leetcode.cn/problems/non-overlapping-intervals/",target:"_blank",rel:"noopener noreferrer"}},[n._v("无重叠区间"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    int eraseOverlapIntervals(vector<vector<int>>& intervals) {\n        if(intervals.empty()){\n            return 0;\n        }\n        int n = intervals.size();\n        sort(intervals.begin(), intervals.end(), [](const auto& u, const auto& v){\n            return u[1]<v[1];\n        });\n        int ans = 1;\n        int right = intervals[0][1];\n        for(int i = 1; i < n; i++){\n            if(intervals[i][0] >= right){\n                ans++;\n                right = intervals[i][1];\n            }\n        }\n        return n-ans;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("h3",{attrs:{id:"划分字母区间"}},[n._v("划分字母区间")]),n._v(" "),s("p",[n._v("力扣 763："),s("a",{attrs:{href:"https://leetcode.cn/problems/partition-labels",target:"_blank",rel:"noopener noreferrer"}},[n._v("划分字母区间"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    vector<int> partitionLabels(string s) {\n        map<char,vector<int>> m;\n        for(int i = 0; i < s.length(); i++){\n            char cur = s[i];\n            if(m.count(cur)){\n                m[cur][1] = i;\n            } else {\n                m[cur] = {i, i};\n            }\n        }\n        vector<vector<int>> vec;\n        for(auto v: m){\n            vec.push_back(v.second);\n        }\n        sort(vec.begin(), vec.end());\n        vector<vector<int>> merged;\n        for(int i = 0; i < vec.size(); i++){\n            vector<int> cur = vec[i];\n            if(merged.empty() || cur[0] > merged.back()[1]){\n                merged.push_back(cur);\n            }\n            if(cur[1] > merged.back()[1]){\n                merged.back()[1] = cur[1];\n            }\n        }\n        vector<int> res;\n        for(int i = 0; i < merged.size(); i++){\n            res.push_back(merged[i][1]-merged[i][0]+1);\n        }\n        return res;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br")])]),s("p",[n._v("文本左右对齐（68）")])])}),[],!1,null,null,null);s.default=t.exports}}]);