(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{1210:function(n,s,a){n.exports=a.p+"assets/img/combine_sum.232ff45d.png"},1472:function(n,s,a){"use strict";a.r(s);var e=a(3),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"深度优先搜索"}},[n._v("深度优先搜索")]),n._v(" "),s("blockquote",[s("p",[n._v("Deep First Search")]),n._v(" "),s("p",[n._v("深度优先搜索一定是递归捏")])]),n._v(" "),s("h3",{attrs:{id:"递增顺序搜索树"}},[n._v("递增顺序搜索树")]),n._v(" "),s("p",[n._v("力扣 897："),s("a",{attrs:{href:"https://leetcode.cn/problems/increasing-order-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[n._v("递增顺序搜索树"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n\nprivate:\n    TreeNode* pre = new TreeNode();\n    TreeNode* head = new TreeNode();\npublic:\n    void inorder(TreeNode* node)\n    {\n        //当当前指针不为空\n        if(node == nullptr)\n        {\n            return;\n        }\n        inorder(node->left);\n        //令pre的右指针指向当前节点\n        pre->right = node;\n        //令当前节点的左指针为空\n        node->left = nullptr;\n        //令pre为当前指针，即下一步的前驱\n        pre = node;\n        inorder(node->right);\n    }\n\n    //寻找最左节点：即新生成链表的表头\n    void findHead(TreeNode* root)\n    {\n        TreeNode* p = root;\n        while(p->left != nullptr)\n        {\n            p = p->left;\n        }\n        head = p;\n    }\n\n    TreeNode* increasingBST(TreeNode* root)\n    {\n        findHead(root);\n        inorder(root);\n        return head;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br")])]),s("h3",{attrs:{id:"二叉搜索树的范围和"}},[n._v("二叉搜索树的范围和")]),n._v(" "),s("p",[n._v("力扣 938："),s("a",{attrs:{href:"https://leetcode.cn/problems/range-sum-of-bst/",target:"_blank",rel:"noopener noreferrer"}},[n._v("二叉搜索树的范围和"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    int res = 0;\n\npublic:\n    void inorder(TreeNode* root, int low, int high)\n    {\n        if(root == nullptr)\n        {\n            return;\n        }\n        inorder(root->left, low, high);\n        if(root->val >= low && root->val <= high)\n        {\n            res += root->val;\n        }\n        inorder(root->right, low, high);\n    }\n\n\n    int rangeSumBST(TreeNode* root, int low, int high) \n    {\n        inorder(root, low, high);\n        return res;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br")])]),s("h3",{attrs:{id:"二叉树的中序遍历"}},[n._v("二叉树的中序遍历")]),n._v(" "),s("p",[n._v("力扣 94："),s("a",{attrs:{href:"https://leetcode.cn/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[n._v("二叉树的中序遍历"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v(" /**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    private List<Integer> list = new ArrayList<>();\n\n    public List<Integer> inorderTraversal(TreeNode root) {\n        if(root!=null && root.left!=null)\n            inorderTraversal(root.left);\n        if(root!=null)\n            list.add(root.val);\n        if(root!=null && root.right!=null)\n            inorderTraversal(root.right);\n        return list;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br")])]),s("h3",{attrs:{id:"二叉树的最近祖先"}},[n._v("二叉树的最近祖先")]),n._v(" "),s("p",[n._v("力扣 236："),s("a",{attrs:{href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[n._v("二叉树的最近公共祖先"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[n._v("递归，深度优先搜索")]),n._v(" "),s("p",[n._v("明确 root “是 q 和 p 公共祖先” 的条件：(l&&r) || ((root==p||root==q)&&(l||r)")]),n._v(" "),s("p",[n._v("l：指左子树为 p 或 q 的祖先；r：指右子树为 p 或 q 的祖先")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n\n    private TreeNode res;\n\n    public boolean dfs(TreeNode root, TreeNode p, TreeNode q){\n        if(root==null){\n            return false;\n        }\n        boolean l = dfs(root.left, p, q);\n        boolean r = dfs(root.right, p, q);\n        if((l&&r) || ((root==p||root==q)&&(l||r))){\n            res = root;\n        }\n        if(l || r || root==p || root==q){\n            return true;\n        }\n        return false;\n    }\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        dfs(root, p, q);\n        return res;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br")])]),s("h3",{attrs:{id:"路径总和"}},[n._v("路径总和")]),n._v(" "),s("p",[n._v("力扣 112："),s("a",{attrs:{href:"https://leetcode.cn/problems/path-sum/",target:"_blank",rel:"noopener noreferrer"}},[n._v("路径总和"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    private boolean flag = false;\n\n    public void dfs(TreeNode root, int targetSum){\n        if(root == null){\n            return;\n        }\n        if(root.left == null && root.right == null && root.val == targetSum){\n            flag = true;\n        }\n        int newTarget = targetSum - root.val;\n        dfs(root.left, newTarget);\n        dfs(root.right, newTarget);\n    }\n\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        dfs(root, targetSum);\n        return flag;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br")])]),s("h3",{attrs:{id:"连接词"}},[n._v("连接词")]),n._v(" "),s("p",[n._v("力扣 472："),s("a",{attrs:{href:"https://leetcode.cn/problems/concatenated-words/",target:"_blank",rel:"noopener noreferrer"}},[n._v("连接词"),s("OutboundLink")],1)]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("public class Solution {\n    static class Trie{\n        public Trie[] children;\n        public boolean isEnd;\n\n        public Trie(){\n            children = new Trie[26];\n            isEnd = false;\n        }\n    }\n    //字典树\n    private Trie trie = new Trie();\n    //将单词插入字典树\n    public void insert(String word){\n        Trie p = trie;\n        int n = word.length();\n        for(int i = 0; i < n; i++){\n            char c = word.charAt(i);\n            int index = c-'a';\n            if(p.children[index] == null){\n                p.children[index] = new Trie();\n            }\n            p = p.children[index];\n        }\n        p.isEnd = true;\n    }\n\n    public boolean dfs(String word, int start){\n        //当已经搜索到最后一位，说明该词被连接而成\n        if(word.length() == start){\n            return true;\n        }\n        Trie p = trie;\n        for(int i = start; i < word.length(); i++){\n            char c = word.charAt(i);\n            int index = c-'a';\n            if(p.children[index] == null){\n                return false;\n            }\n            p = p.children[index];\n            if(p.isEnd){\n                //深度优先搜索\n                if(dfs(word, i+1)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public List<String> findAllConcatenatedWordsInADict(String[] words){\n        List<String> res = new ArrayList<>();\n        Arrays.sort(words, (a, b)-> {\n            return a.length()-b.length();\n        });\n        for(String word: words){\n            if(word.length() == 0){\n                continue;\n            }\n            if(dfs(word, 0)){\n                res.add(word);\n            } else {\n                insert(word);\n            }\n        }\n        return res;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br"),s("span",{staticClass:"line-number"},[n._v("66")]),s("br"),s("span",{staticClass:"line-number"},[n._v("67")]),s("br"),s("span",{staticClass:"line-number"},[n._v("68")]),s("br")])]),s("h3",{attrs:{id:"猫和老鼠"}},[n._v("猫和老鼠")]),n._v(" "),s("p",[n._v("力扣 913："),s("a",{attrs:{href:"https://leetcode.cn/problems/cat-and-mouse/",target:"_blank",rel:"noopener noreferrer"}},[n._v("猫和老鼠"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[n._v("在一场信息公开的游戏中，总有一方有一种方法使之不会输")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("package com.solution;\n\nimport java.util.Arrays;\n\npublic class MouseCatGame {\n\n    private static final int catWin = 2;\n    private static final int draw = 0;\n    private static final int mouseWin = 1;\n\n    private int n;\n    private int[][][] dp;\n    private int[][] graph;\n\n    public int mouseCatGame(int[][] graph){\n        n = graph.length;\n        dp = new int[n][n][2*n];\n        for(int[][] i: dp){\n            for(int[] j: i){\n                Arrays.fill(j, -1);\n            }\n        }\n        this.graph = graph;\n        return getRes(1, 2, 0);\n    }\n\n    public int getRes(int mouse, int cat, int steps){\n        if(steps >= 2*n){\n            return draw;\n        }\n        if(dp[mouse][cat][steps] < 0){\n            if(mouse == 0){\n                dp[mouse][cat][steps] = mouseWin;\n            } else if(mouse == cat){\n                dp[mouse][cat][steps] = catWin;\n            } else{\n                getNextRes(mouse, cat, steps);\n            }\n        }\n        return dp[mouse][cat][steps];\n    }\n\n    public void getNextRes(int mouse, int cat, int steps){\n        int curMove = steps%2 == 0 ? mouse:cat;\n        int defaultRes = curMove==mouse ? catWin:mouseWin;\n        int res = defaultRes;\n        for(int nextStep: graph[curMove]){\n            if(curMove == cat && nextStep == 0){\n                continue;\n            }\n            int mouseNextStep = curMove==mouse ? nextStep:mouse;\n            int catNextStep = curMove==cat ? nextStep:cat;\n            int nextRes = getRes(mouseNextStep, catNextStep, steps+1);\n            if(nextRes != defaultRes){\n                res = nextRes;\n                if(res != draw){\n                    break;\n                }\n            }\n        }\n        dp[mouse][cat][steps] = res;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br")])]),s("h3",{attrs:{id:"最长递增子序列的个数"}},[n._v("最长递增子序列的个数")]),n._v(" "),s("p",[n._v("力扣 673："),s("a",{attrs:{href:"https://leetcode.cn/problems/number-of-longest-increasing-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[n._v("最长递增子序列的个数"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[s("code",[n._v("dp[i]")]),n._v("记录当前位置能构成的最长递增子序列的长度")]),n._v(" "),s("p",[n._v("对"),s("code",[n._v("dp[i]==maxLength")]),n._v("的位置进行深度优先搜索，找到能构成其最长递增子序列的道路总数，返回条件为"),s("code",[n._v("dp[j]==1 && nums[j]<pre")]),n._v("，其中"),s("code",[n._v("pre")]),n._v("为上一层的数大小")])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\n    private int[] dp;\n    private int res;\n\n    public int buildDp(int[] nums){\n        res = 0;\n        int n = nums.length;\n        dp = new int[n];\n        dp[0] = 1;\n        int maxLength = 1;\n        for(int i = 1; i < n; i++){\n            int d = 0, j;\n            for(j = i-1; j >= 0; j--){\n                if(nums[j] < nums[i] && dp[j] > d){\n                    d = dp[j];\n                }\n            }\n            dp[i] = d+1;\n            maxLength = Math.max(maxLength, dp[i]);\n        }\n        return maxLength;\n    }\n\n    public void dfs(int index, int pre, int[] nums){\n        if(dp[index] == 1){\n            if(nums[index] < pre){\n                res++;\n            }\n            return;\n        }\n        for(int i = 0; i < index; i++){\n            if(dp[i] == dp[index]-1 && nums[i] < nums[index]){\n                dfs(i, nums[index], nums);\n            }\n        }\n    }\n\n    public int findNumberOfLIS(int[] nums){\n        int n = nums.length;\n        int maxLength = buildDp(nums);\n        if(maxLength == 1){\n            return n;\n        }\n        for(int i = 1; i < n; i++){\n            if(dp[i] == maxLength){\n                dfs(i, maxLength, nums);\n            }\n        }\n        return res;\n    }\n\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br")])]),s("h3",{attrs:{id:"累加数"}},[n._v("累加数")]),n._v(" "),s("p",[n._v("力扣 306："),s("a",{attrs:{href:"https://leetcode.cn/problems/additive-number/",target:"_blank",rel:"noopener noreferrer"}},[n._v("累加数"),s("OutboundLink")],1)]),n._v(" "),s("blockquote",[s("p",[n._v("外两层循环枚举第一、第二结束点控制变量（"),s("code",[n._v("第一结束点+1==第二起始点")]),n._v("）")]),n._v(" "),s("p",[n._v("内一层循环枚举第三结束点（"),s("code",[n._v("第二结束点+1==第三起始点")]),n._v("）")]),n._v(" "),s("p",[n._v("若"),s("code",[n._v("pre+cur==next")]),n._v("，向后搜索下一组数，直到"),s("code",[n._v("index==n-1")]),n._v("，即第三结束点为串末尾，返回"),s("code",[n._v("true")])]),n._v(" "),s("p",[n._v("若"),s("code",[n._v("pre+cur<next")]),n._v("，跳出本次循环，因为在第三结束点向后移动的过程中，"),s("code",[n._v("next")]),n._v("越来越大")]),n._v(" "),s("p",[n._v("若"),s("code",[n._v("pre+cur>next")]),n._v("，向后循环遍历第三结束点，增大"),s("code",[n._v("next")])])]),n._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('package com.solution;\n\npublic class IsAdditiveNumber {\n    public boolean isAdditiveNumber(String nums){\n        int n = nums.length();\n        char[] charNums = nums.toCharArray();\n        for(int i = 0; i < n-1; i++){\n            if(charNums[0] == \'0\' && i > 0){ return false; }\n            long pre = Long.parseLong(nums.substring(0, i+1));\n            for(int j = i+1; j < n-1; j++){\n                if(charNums[i+1] == \'0\' && j > i+1){\n                    continue;\n                }\n                long cur = Long.parseLong(nums.substring(i+1, j+1));\n                if(dfs(nums, pre, cur, n, j)){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public boolean dfs(String nums, long pre, long cur, int length, int index) {\n        //退出条件\n        if (index == length-1) {\n            return true;\n        }\n        for (int i = index + 1; i < length; i++) {\n            if (nums.charAt(index + 1) == \'0\' && i > index + 1) { return false; }\n            long next = Long.parseLong(nums.substring(index + 1, i + 1));\n            System.out.println(pre + "+" + cur + " " + next + "  " + i);\n            if (next > pre + cur) { return false; }\n            if (next == pre + cur) { return dfs(nums, cur, next, length, i); }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        IsAdditiveNumber ian = new IsAdditiveNumber();\n        System.out.println(ian.isAdditiveNumber("112358"));\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br")])]),s("h3",{attrs:{id:"路径总和-ii"}},[n._v("路径总和 II")]),n._v(" "),s("p",[n._v("力扣 113："),s("a",{attrs:{href:"https://leetcode.cn/problems/path-sum-ii/",target:"_blank",rel:"noopener noreferrer"}},[n._v("路径总和 II"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("深度搜索，递归过程")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    vector<vector<int>> res;\n\n    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {\n        if(!root){\n            return res;\n        }\n        vector<int> vec;\n        dfs(root, targetSum, vec);\n        return res;\n    }\n\n    void dfs(TreeNode* node, int targetSum, vector<int>& fact){\n        if(!node->left && !node->right){\n            if(node->val == targetSum){\n                fact.push_back(node->val);\n                res.push_back(fact);\n            }\n            fact.clear();\n        }\n        fact.push_back(node->val);\n        if(node->left){\n            vector<int> left(fact);\n            dfs(node->left, targetSum-node->val, left);\n        }\n        if(node->right){\n            vector<int> right(fact);\n            dfs(node->right, targetSum-node->val, right);\n        }\n        fact.clear();\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br")])]),s("h3",{attrs:{id:"钥匙和房间"}},[n._v("钥匙和房间")]),n._v(" "),s("p",[n._v("力扣 841："),s("a",{attrs:{href:"https://leetcode.cn/problems/keys-and-rooms/",target:"_blank",rel:"noopener noreferrer"}},[n._v("钥匙和房间"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("遍历房间中的钥匙，用 flags[i] 表示第 i 个房间是否被访问过")]),n._v(" "),s("li",[n._v("再次访问到直接跳过，未访问到则访问并遍历该房间中的钥匙")]),n._v(" "),s("li",[n._v("如果 flags 中存在 false，则说明未遍历完")]),n._v(" "),s("li",[n._v("因为整个图只有一个入口，即 rooms[0]，如果从磁入口深度遍历不完，则说明该图无法通过 rooms[0] 到达所有节点")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("Solution {\npublic:\n\n    bool canVisitAllRooms(vector<vector<int>>& rooms) {\n        vector<int> flags(rooms.size(), 0);\n        dfs(rooms, flags, 0);\n        for(auto& flag: flags){\n            if(!flag){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    void dfs(vector<vector<int>>& rooms, vector<int>& flags, int index){\n        if(flags[index]){\n            return;\n        }\n        vector<int> keys = rooms[index];\n        flags[index] = 1;\n        for(auto& key: keys){\n            dfs(rooms, flags, key);\n        }     \n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("h3",{attrs:{id:"岛屿数量"}},[n._v("岛屿数量")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/number-of-islands/?envType=study-plan&id=suan-fa-ji-chu&plan=algorithms&plan_progress=4g9kt0m",target:"_blank",rel:"noopener noreferrer"}},[n._v("200. 岛屿数量 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("找到为 '1' 的节点，深度搜索附近为 '1' 的节点")]),n._v(" "),s("li",[n._v("被访问过的 '1' 节点需要被标记为 '2'，和海洋('0')、未被访问的岛屿('1')做区分")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n\n    int numIslands(vector<vector<char>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int res = 0;\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                if(grid[i][j] == '1'){\n                    res++;\n                    dfs(grid, i, j);\n                }\n            }\n        }\n        return res;\n    }\n\n    void dfs(vector<vector<char>>& grid, int x, int y){\n        if(x < 0 || x >= grid.size() || y < 0 || y >= grid[0].size()){\n            return;\n        }\n        if(grid[x][y] != '1'){\n            return;\n        }\n        grid[x][y] = '2';\n        dfs(grid, x-1, y);\n        dfs(grid, x+1, y);\n        dfs(grid, x, y-1);\n        dfs(grid, x, y+1);\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br")])]),s("p",[n._v("和 "),s("a",{attrs:{href:"https://leetcode.cn/problems/number-of-provinces/?envType=study-plan&id=suan-fa-ji-chu&plan=algorithms&plan_progress=4g9kt0m",target:"_blank",rel:"noopener noreferrer"}},[n._v("547. 省份数量 - 力扣（Leetcode）"),s("OutboundLink")],1),n._v(" 思路差不太多，主要考虑如何标记已访问节点和遍历的边界")]),n._v(" "),s("h3",{attrs:{id:"被围绕的区域"}},[n._v("被围绕的区域")]),n._v(" "),s("p",[n._v("首先判断是否被包围，若被包围，一次性修改所有相连的 'O'，否则不做修改")]),n._v(" "),s("p",[n._v("要注意边界上的 'O' 要求始终返回不被包围的信息，于是不被标记为"),s("strong",[n._v("已访问")]),n._v("，以免直接跳过返回 true")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n    void solve(vector<vector<char>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<vector<int>> visited(m, vector<int>(n));\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                if(board[i][j] == 'O' && !visited[i][j]){\n                    if(encircled(board, i, j, visited)){\n                        cout << i << \" \" << j << endl;\n                        tag(board, i, j);\n                    }\n                }\n            }\n        }\n    }\n\n    void tag(vector<vector<char>>& board, int i, int j){\n        if(i < 0 || i >= board.size() || j < 0 || j >= board[0].size()-1){\n            return;\n        }\n        if(board[i][j] == 'X'){\n            return;\n        }\n        board[i][j] = 'X';\n        tag(board, i-1, j);\n        tag(board, i+1, j);\n        tag(board, i, j-1);\n        tag(board, i, j+1);\n    }\n\n    bool encircled(vector<vector<char>>& board, int i, int j, vector<vector<int>>& visited){\n        if(board[i][j] == 'X' || visited[i][j]){\n            return true;\n        }  \n        if(i == 0 || i == board.size()-1 || j == 0 || j == board[0].size()-1){\n            return false;\n        }\n        visited[i][j] = true;\n        bool left = encircled(board, i, j-1, visited);\n        bool right = encircled(board, i, j+1, visited);\n        bool up = encircled(board, i-1, j, visited);\n        bool down = encircled(board, i+1, j, visited);\n        return left && right && up && down;\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br")])]),s("h2",{attrs:{id:"回溯问题"}},[n._v("回溯问题")]),n._v(" "),s("blockquote",[s("p",[n._v("在 dfs 的基础上，增加回退和剪枝的功能，本质上还是一个 dfs")])]),n._v(" "),s("h3",{attrs:{id:"所有可能的路径"}},[n._v("所有可能的路径")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/all-paths-from-source-to-target/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("797. 所有可能的路径 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("给你一个有 "),s("code",[n._v("n")]),n._v(" 个节点的 "),s("strong",[n._v("有向无环图（DAG）")]),n._v("，请你找出所有从节点 "),s("code",[n._v("0")]),n._v(" 到节点 "),s("code",[n._v("n-1")]),n._v(" 的路径并输出")])]),n._v(" "),s("p",[n._v("利用栈弹出使用过的节点，而非不断构造新的空间压入")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n\n    vector<int> stk;\n    vector<vector<int>> res;\n\n    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {\n        stk.push_back(0);\n        dfs(graph, 0, graph.size()-1);\n        return res;\n    }\n\n    void dfs(vector<vector<int>>& graph, int cur, int target){\n        if(cur == target){\n            res.push_back(stk);\n            return;\n        }\n        for(auto& next: graph[cur]){\n            stk.push_back(next);\n            dfs(graph, next, target);\n            stk.pop_back();\n        }\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br")])]),s("h3",{attrs:{id:"子集"}},[n._v("子集")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/subsets/submissions/",target:"_blank",rel:"noopener noreferrer"}},[n._v("78. 子集 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("数组元素互不相同，无需剪枝")]),n._v(" "),s("li",[n._v("从上往下（树的深度）枚举所有情况")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n\n    vector<vector<int>> res;\n\n    vector<vector<int>> subsets(vector<int>& nums) {\n        vector<int> path;\n        backtrack(nums, path, 0);\n        return res;\n    }\n\n    void backtrack(vector<int>& nums, vector<int>& path, int start){\n        res.push_back(path);\n        for(int i = start; i < nums.size(); i++){\n            path.push_back(nums[i]);\n            backtrack(nums, path, i+1);\n            path.pop_back();\n        }\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/subsets-ii/submissions/",target:"_blank",rel:"noopener noreferrer"}},[n._v("90. 子集 II - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("数组中有重复元素，需要剪枝")]),n._v(" "),s("ul",[s("li",[n._v("先排序，使重复元素相邻")]),n._v(" "),s("li",[n._v("再在遍历时，跳过重复元素（因为在同一层已经选中了该元素，再选，其子树均重复记录）")])]),n._v(" "),s("h3",{attrs:{id:"全排列"}},[n._v("全排列")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/permutations/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("46. 全排列 - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("不断从头到尾进行遍历，暴搜")]),n._v(" "),s("li",[n._v("用数组动态标记访问过的元素")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n\n    vector<int> visited;\n    vector<vector<int>> res;    \n\n    vector<vector<int>> permute(vector<int>& nums) {\n        visited = vector<int>(nums.size(), 0);\n        vector<int> stk;\n        backtrack(nums, stk);\n        return res;\n    }\n\n    void backtrack(vector<int>& nums, vector<int>& stk){\n        int n = nums.size();\n        if(stk.size() == n){\n            res.push_back(stk);\n            return;\n        }\n        for(int i = 0; i < n; i++){\n            if(visited[i]){\n                continue;\n            }\n            stk.push_back(nums[i]);\n            visited[i] = true;\n            backtrack(nums, stk);\n            stk.pop_back();\n            visited[i] = false;\n        }\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br")])]),s("p",[n._v("进阶版本："),s("a",{attrs:{href:"https://leetcode.cn/problems/permutations-ii/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("47. 全排列 II - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("需要考虑去重（剪枝）问题，关键在于")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("sort(nums.begin(), nums.end());\n\nif(i > 0 && nums[i] == nums[i-1] && !visited[i-1]){\n\tcontinue;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("h3",{attrs:{id:"组合总和"}},[n._v("组合总和")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode.cn/problems/combination-sum/description/",target:"_blank",rel:"noopener noreferrer"}},[n._v("39. Combination Sum - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("在数组中找到所有和为 target 的不重复的组合")]),n._v(" "),s("img",{attrs:{src:a(1210)}}),n._v(" "),s("p",[n._v("关键在于：同一层不能遍历相同的元素，如果能够遍历将出现很多重复组合，如"),s("code",[n._v("[1,2,4], [1,4,2], [4,1,2]")]),n._v("，这个问题将退化为上一题全排列")]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Solution {\npublic:\n\n    vector<vector<int>> res;\n\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        int n = candidates.size();\n        vector<int> stk;\n        backtrack(candidates, target, stk, 0);\n        return res;\n    }\n\n    void backtrack(vector<int>& candidates, int target, vector<int>& stk, int start){\n        if(target <= 0){\n            if(target == 0) { res.push_back(stk); }\n            return;\n        }\n        for(int i = start; i < candidates.size(); i++){\n            int cur = candidates[i];\n            stk.push_back(cur);\n            backtrack(candidates, target-cur, stk, i);\n            stk.pop_back();\n        }\n    }\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br")])]),s("p",[n._v("进阶版："),s("a",{attrs:{href:"https://leetcode.cn/problems/combination-sum-ii/",target:"_blank",rel:"noopener noreferrer"}},[n._v("40. 组合总和 II - 力扣（Leetcode）"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("每个数字每个组合只能出现一次，需要去重")]),n._v(" "),s("li",[n._v("同样每层不能重复选取同一元素")])]),n._v(" "),s("p",[n._v("回溯函数")]),n._v(" "),s("ul",[s("li",[n._v("排序数组，相邻的相同元素，若前者未被访问，则直接跳过\n"),s("ul",[s("li",[n._v("因为是从左往右便利的，若后者当前访问，前者未访问，这一过程在上一轮肯定发生过，于是跳过")]),n._v(" "),s("li",[n._v("这一过程是指：两个相同元素占用树相同的两层")])])]),n._v(" "),s("li",[n._v("用"),s("code",[n._v("visited")]),n._v("数组标记被访问过的元素，进入下一轮之前取消标记")])]),n._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("void backtrack(vector<int>& candidates, int target, vector<int>& stk, int start){\n\tif(target <= 0){\n\t\tif(target == 0) { res.push_back(stk); }\n\t\treturn;\n    }\n    for(int i = start; i < candidates.size(); i++){\n        if(visited[i]){\n            continue;\n        }\n        if(i > 0 && candidates[i] == candidates[i-1] && !visited[i-1]){\n            continue;\n        }\n        int cur = candidates[i];\n        stk.push_back(cur);\n        visited[i] = true;\n        backtrack(candidates, target-cur, stk, i+1);\n        stk.pop_back();\n        visited[i] = false;\n    }\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);