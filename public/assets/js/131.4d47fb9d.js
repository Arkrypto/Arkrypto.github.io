(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{1495:function(t,s,n){"use strict";n.r(s);var i=n(1),e=Object(i.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p",[this._v("人生只能贪心，尽量动态规划😟")]),this._v(" "),t("p",[this._v("算法的演变应该是从朴素到精巧，我们考虑解决一个问题，一定是从朴素的穷举，如深搜广搜，到复杂一点的规模压缩，如递归分治、动态规划、剪枝。需要注意的是，很多时候即使采用了规模压缩，其本质上仍然是穷举，如动态规划通过记录状态转移降低了复杂度，省去了一些重复计算，但实际上还是在穷举，爆搜所有的状态，我们说 DP 是比线性规划还简单的 P")]),this._v(" "),t("p",[this._v("贪心是另外的情况，他并非穷举，而在每一个状态总选取当前最好，即使这个选择并非全局最优，但他没有选择上的困难 —— 不需要耗费额外的计算去考虑，这反而给了他线性效率。正如此，我们说，在 DP 本身开销过大的情况下，采用选择性的贪心是非常明智的选择，即所谓启发式算法，普通人也只能如此")])])}),[],!1,null,null,null);s.default=e.exports}}]);