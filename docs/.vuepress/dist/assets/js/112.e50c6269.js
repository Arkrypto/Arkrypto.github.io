(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{1386:function(t,n,l){"use strict";l.r(n);var s=l(14),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("hr"),t._v(" "),n("p",[t._v("算法的演变应该是从朴素到精巧，我们考虑解决一个问题，一定是从朴素的穷举，如深搜广搜，到复杂一点的规模压缩，如递归分治、动态规划。需要注意的是，很多时候采用的规模压缩其本质上仍然是穷举，如分治在穷举子问题解、动态规划在穷举状态机。以现在的算力，即使存在剪枝策略，这样的穷举也是搜不完的，于是我们只能考虑用贪心的思想去解出优解，而非最优解")]),t._v(" "),n("p",[t._v("贪心是另外的情况，我们在每一个状态选取当前最好的下一步，而不考虑再往后的后果，当问题不满足最优子结构时，这样的策略不可能保证找到最优解，不过好消息是我们没有选择上的困难，不需要耗费过多的计算去考虑下一步，也不存在试错后的回溯，这反而让我们拥有线性效率")]),t._v(" "),n("ul",[n("li",[t._v("或许对于人生而言，贪心就是最好的策略，我们中大多数必须线性的前进，既没有回溯的时间，也没有规划的空间，只能凭借有限的算力尽量去预测，或者说去蒙")])]),t._v(" "),n("p",[t._v("在实际问题中，一昧的贪心效果非常非常差，于是矛盾演变成如何在规划的质量和贪心的效率上做取舍。我们的做法是在规划过程中偶尔的贪一把，以前是启发式搜索，现在是深度学习，说白了就是在一定的分析基础上去蒙，只不过后者得益于庞大的计算量，拥有极大的容错和相当不错的拟合效果，这样的输出是模糊的，绝非最优解，但却能远超过平均分，让人趋之若鹜。如果要硬说数学原理，或许是一个高维的线性规划问题求解")])])}),[],!1,null,null,null);n.default=e.exports}}]);