(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{1507:function(s,t,e){"use strict";e.r(t);var a=e(4),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/wfd360/p/11314697.html",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("Jenkins自动化部署入门详细教程 - java老兵 - 博客园"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"ci-cd-和-jenkins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd-和-jenkins"}},[s._v("#")]),s._v(" CI/CD 和 Jenkins")]),s._v(" "),t("h3",{attrs:{id:"什么是-ci-cd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ci-cd"}},[s._v("#")]),s._v(" 什么是 CI/CD")]),s._v(" "),t("p",[s._v("CI/CD（Continuous Integration and Continuous Delivery），即持续集成和持续交付")]),s._v(" "),t("ol",[t("li",[s._v("快速交付：CI/CD 自动化流程可以使软件交付过程更快、更频繁，减少了手动操作和人工干预的时间。这样可以更快地将新功能、修复和改进的代码交付给用户，满足市场需求并保持竞争优势")]),s._v(" "),t("li",[s._v("提高质量：持续集成通过频繁地集成和构建代码，并进行自动化测试和静态代码分析，有助于发现和解决问题。通过尽早发现和修复缺陷，可以提高软件的质量和稳定性")]),s._v(" "),t("li",[s._v("自动化部署：持续交付将部署过程自动化，从而减少了手动部署的错误和风险。通过自动化部署流程，可以确保软件在不同环境中的一致性，并减少了部署时间和工作量")]),s._v(" "),t("li",[s._v("可靠性和可重复性：CI/CD 强调自动化和标准化的流程，使软件交付过程变得可靠和可重复。每次构建、测试和部署都是基于相同的流程和环境，减少了人为因素的影响，提高了软件交付的一致性和可靠性")]),s._v(" "),t("li",[s._v("团队协作与反馈：CI/CD 促进了团队成员之间的协作和沟通。通过频繁地集成和交付，团队成员可以及时了解彼此的工作进展和变更，减少代码冲突和集成问题，并能够更好地合作解决出现的问题")]),s._v(" "),t("li",[s._v("可追溯性和回滚能力：由于 CI/CD 自动化流程的记录和版本控制，可以轻松追踪每个构建和部署的结果。这样，在出现问题时可以快速定位和回滚到之前的可用版本，减少了故障修复时间和影响范围。")])]),s._v(" "),t("p",[s._v("总而言之，CI/CD 提供了一种高效、可靠和可持续的软件交付方法。它可以加速软件开发和交付的速度，提高软件质量和可靠性，并促进团队之间的协作和反馈。通过使用 CI/CD，组织可以更好地适应市场需求，降低软件交付的风险，并实现持续创新和改进")]),s._v(" "),t("p",[s._v("CI/CD 可以基于各种服务和工具来搭建，具体选择取决于项目需求、"),t("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E6%8A%80%E6%9C%AF%E6%A0%88&spm=1001.2101.3001.7020",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("技术栈"),t("OutboundLink")],1),s._v("和团队偏好。以下是一些常用的服务和工具")]),s._v(" "),t("ol",[t("li",[s._v("版本控制系统：如 Git（例如 GitHub、GitLab、Bitbucket 等）用于管理代码版本和协作开发")]),s._v(" "),t("li",[s._v("持续集成服务：如 Jenkins、CircleCI、Travis CI、GitLab CI/CD 等，用于自动化构建、测试和集成代码")]),s._v(" "),t("li",[s._v("容器化平台：如 Docker 和 Kubernetes，用于创建和管理容器化的应用程序环境，实现应用程序的可移植性和一致性")]),s._v(" "),t("li",[s._v("云平台和部署服务：如 Amazon Web Services（AWS）、Microsoft Azure、Google Cloud Platform（GCP）等，提供了各种云计算服务和部署工具，如 AWS CodePipeline、Azure DevOps、Google Cloud Build 等")]),s._v(" "),t("li",[s._v("自动化测试工具：如 Selenium、JUnit、Pytest 等，用于编写和执行自动化测试脚本，验证代码的功能和质量")]),s._v(" "),t("li",[s._v("静态代码分析工具：如 SonarQube、ESLint、PMD 等，用于静态代码分析和检查，帮助发现潜在的代码质量问题")]),s._v(" "),t("li",[s._v("配置管理工具：如 Ansible、Chef、Puppet 等，用于自动化配置和管理应用程序和基础设施的环境")]),s._v(" "),t("li",[s._v("日志和监控工具：如 ELK Stack（Elasticsearch、Logstash、Kibana）、Prometheus、Grafana 等，用于收集、分析和监控应用程序的日志和指标。")])]),s._v(" "),t("p",[s._v("这些服务和工具可以根据具体需求进行组合和配置，形成一个符合项目要求的 CI/CD 工作流程。可以根据团队的技术栈和偏好选择适合的工具，同时考虑集成和兼容性的因素，以确保顺畅的 CI/CD 实施")]),s._v(" "),t("h3",{attrs:{id:"why-jenkins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-jenkins"}},[s._v("#")]),s._v(" Why Jenkins")]),s._v(" "),t("p",[s._v("在实际开发中，我们经常要一边开发一边测试，当然这里说的测试并不是程序员对自己代码的单元测试，而是同组程序员将代码提交后，由测试人员测试")]),s._v(" "),t("p",[s._v("或者前后端分离后，经常会修改接口，然后重新部署，这些情况都会涉及到频繁的打包部署")]),s._v(" "),t("p",[s._v("手动打包常规步骤：")]),s._v(" "),t("ol",[t("li",[s._v("提交代码")]),s._v(" "),t("li",[s._v("问一下同组小伙伴有没有要提交的代码")]),s._v(" "),t("li",[s._v("拉取代码并打包（war 包，或者 jar 包）")]),s._v(" "),t("li",[s._v("上传到 Linux 服务器")]),s._v(" "),t("li",[s._v("查看当前程序是否在运行")]),s._v(" "),t("li",[s._v("关闭当前程序")]),s._v(" "),t("li",[s._v("启动新的 jar 包")]),s._v(" "),t("li",[s._v("观察日志看是否启动成功")]),s._v(" "),t("li",[s._v("如果有同事说，自己还有代码没有提交......再次重复 1-8 的步骤！！！！！（一上午没了）")])]),s._v(" "),t("p",[s._v("那么，有一种工具能够实现，将代码提交到 git 后就自动打包部署勒，答案是肯定的：Jenkins")]),s._v(" "),t("ul",[t("li",[s._v("当然除了 Jenkins 以外，也还有其他的工具可以实现自动化部署，如 Hudson 等，只是 Jenkins 相对来说，使用得更广泛")])]),s._v(" "),t("p",[s._v("实际上，Jenkins 就是一个持续集成工具（CI Service Tool），常与版本控制系统如 Git 和容器化平台如 Kubernetes 等实现企业化的软件迭代部署")]),s._v(" "),t("h3",{attrs:{id:"jenkins-工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-工作流程"}},[s._v("#")]),s._v(" Jenkins 工作流程")]),s._v(" "),t("img",{attrs:{src:e(913)}}),s._v(" "),t("p",[s._v("首先我们有一个版本控制服务器，如 GitHub，当 push 任务执行后，将触发对 Jenkins 的通知（通知他我代码更新了，你快拉一下重新部署）")]),s._v(" "),t("ul",[t("li",[s._v("注意这个工作是版本控制系统实现的")])]),s._v(" "),t("p",[s._v("当收到通知后，Jenkins 将调用本地的 Git 和 Maven 插件")]),s._v(" "),t("ol",[t("li",[s._v("git pull 拉取远端仓库的新代码")]),s._v(" "),t("li",[s._v("mvn package / go build 打包可执行文件")]),s._v(" "),t("li",[s._v("将可执行的打包文件上传到指定服务器的指定目录下")])]),s._v(" "),t("p",[s._v("上传到服务器后，Jenkins 将执行事先配置好的 Linux 命令，例如")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /home/arkrypto/app\n./stop.sh\n./start.sh\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("于是任务转变为常规的 sh 脚本部署，事先编写好"),t("code",[s._v("stop.sh / start.sh")]),s._v("并放在指定目录即可")]),s._v(" "),t("h2",{attrs:{id:"jenkins-搭建与部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-搭建与部署"}},[s._v("#")]),s._v(" Jenkins 搭建与部署")]),s._v(" "),t("h3",{attrs:{id:"安装及初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装及初始化"}},[s._v("#")]),s._v(" 安装及初始化")]),s._v(" "),t("p",[s._v("下载 war 包 "),t("a",{attrs:{href:"http://mirrors.jenkins.io/war-stable/latest/jenkins.war",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("jenkins.war"),t("OutboundLink")],1),s._v("，注意本地 JDK 版本和 Jenkins 的对应")]),s._v(" "),t("img",{attrs:{src:e(914)}}),s._v(" "),t("p",[s._v("用 Java 启动 Jenkins")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("java")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-jar")]),s._v(" jenkins.war "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--httpPort")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8090")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("进入浏览器页面"),t("code",[s._v("localhost:8090")]),s._v("，根绝页面提示，找到本地密钥文件，填写初始密码，解锁系统")]),s._v(" "),t("img",{attrs:{src:e(915)}}),s._v(" "),t("p",[s._v("插件安装选择：安装推荐的插件，等待")]),s._v(" "),t("img",{attrs:{src:e(916)}}),s._v(" "),t("p",[s._v("设置初始用户和密码，初始化完成，进入系统")]),s._v(" "),t("img",{attrs:{src:e(917)}}),s._v(" "),t("h3",{attrs:{id:"安全及凭证设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全及凭证设置"}},[s._v("#")]),s._v(" 安全及凭证设置")]),s._v(" "),t("p",[s._v("用户手册："),t("a",{attrs:{href:"https://www.jenkins.io/doc/book/getting-started/",target:"_blank",rel:"nofollow noopener noreferrer"}},[s._v("User Handbook Overview"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("安全设置")]),s._v(" "),t("img",{attrs:{src:e(918)}}),s._v(" "),t("p",[s._v("Security 设置")]),s._v(" "),t("img",{attrs:{src:e(919)}}),s._v(" "),t("img",{attrs:{src:e(920)}}),s._v(" "),t("p",[s._v("创建凭证（第一次进入系统凭证栏将是空的），点击 Stores scoped to Jenkins 的“全局”，而后在右上方点击 Add Credentials")]),s._v(" "),t("img",{attrs:{src:e(921)}}),s._v(" "),t("p",[s._v("创建凭证")]),s._v(" "),t("img",{attrs:{src:e(922)}}),s._v(" "),t("p",[s._v("ID 为空系统将自动分配，这个凭证之后在创建 Item 时会用到")]),s._v(" "),t("img",{attrs:{src:e(923)}}),s._v(" "),t("h3",{attrs:{id:"工具插件设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工具插件设置"}},[s._v("#")]),s._v(" 工具插件设置")]),s._v(" "),t("p",[s._v("Tools 配置，主要是 JDK、Git 和 Maven")]),s._v(" "),t("img",{attrs:{src:e(924)}}),s._v(" "),t("img",{attrs:{src:e(925)}}),s._v(" "),t("img",{attrs:{src:e(926)}}),s._v(" "),t("img",{attrs:{src:e(927)}}),s._v(" "),t("p",[s._v("Plugins 配置，检查 Publish over SSH 和 Deploy to container Plugin 是否安装成功即可")]),s._v(" "),t("h3",{attrs:{id:"系统设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统设置"}},[s._v("#")]),s._v(" 系统设置")]),s._v(" "),t("p",[s._v("系统设置，配置需要推送 jar 包的远端服务器")]),s._v(" "),t("img",{attrs:{src:e(928)}}),s._v(" "),t("p",[s._v("点击 System，翻到最下面，"),t("strong",[s._v("注意只要在安装好 Publish over SSH 后，在系统配置中才有远程服务器的配置选项")])]),s._v(" "),t("img",{attrs:{src:e(929)}}),s._v(" "),t("p",[s._v("其中上面仅需填写 Passphrase（远程服务器密码）")]),s._v(" "),t("p",[s._v("点击 SSH Servers 新增服务器")]),s._v(" "),t("img",{attrs:{src:e(930)}}),s._v(" "),t("p",[s._v("点击右下角测试连接，显示 Success，保存退出即可")]),s._v(" "),t("h2",{attrs:{id:"ci-测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ci-测试"}},[s._v("#")]),s._v(" CI 测试")]),s._v(" "),t("p",[s._v("SpringBoot + Maven + GitHub + Jenkins")]),s._v(" "),t("h3",{attrs:{id:"新建-item"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新建-item"}},[s._v("#")]),s._v(" 新建 Item")]),s._v(" "),t("p",[s._v("大体步骤：基础配置 → 源码管理 → 构建触发器 → 构建环境 → 构建 → 构建后操作")]),s._v(" "),t("h3",{attrs:{id:"linux-服务器配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux-服务器配置"}},[s._v("#")]),s._v(" Linux 服务器配置")]),s._v(" "),t("h3",{attrs:{id:"github-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#github-配置"}},[s._v("#")]),s._v(" GitHub 配置")])])}),[],!1,null,null,null);t.default=r.exports},913:function(s,t,e){s.exports=e.p+"assets/img/858186-20190804162611917-80438542.4c8b44d8.png"},914:function(s,t,e){s.exports=e.p+"assets/img/image-20250414152436430.107b1d78.png"},915:function(s,t,e){s.exports=e.p+"assets/img/image-20250414151736379.d2b2afb1.png"},916:function(s,t,e){s.exports=e.p+"assets/img/image-20250414151703759.d282a7e3.png"},917:function(s,t,e){s.exports=e.p+"assets/img/image-20250414152242583.23c3298e.png"},918:function(s,t,e){s.exports=e.p+"assets/img/image-20250414164955236.54571de3.png"},919:function(s,t,e){s.exports=e.p+"assets/img/image-20250414164047705.4de7f03d.png"},920:function(s,t,e){s.exports=e.p+"assets/img/image-20250414164245790.edd8b10f.png"},921:function(s,t,e){s.exports=e.p+"assets/img/image-20250414165911714.d08efdee.png"},922:function(s,t,e){s.exports=e.p+"assets/img/image-20250414170014320.e0c511b3.png"},923:function(s,t,e){s.exports=e.p+"assets/img/image-20250414170058799.945cfc47.png"},924:function(s,t,e){s.exports=e.p+"assets/img/image-20250414164457490.0d2027db.png"},925:function(s,t,e){s.exports=e.p+"assets/img/image-20250414163714518.d7e12e9b.png"},926:function(s,t,e){s.exports=e.p+"assets/img/image-20250414163738887.b2d09648.png"},927:function(s,t,e){s.exports=e.p+"assets/img/image-20250414163805080.0a7c5e7f.png"},928:function(s,t,e){s.exports=e.p+"assets/img/image-20250414170217580.736576f9.png"},929:function(s,t,e){s.exports=e.p+"assets/img/image-20250414171924051.ea34529b.png"},930:function(s,t,e){s.exports=e.p+"assets/img/image-20250414172445034.8ff1079d.png"}}]);