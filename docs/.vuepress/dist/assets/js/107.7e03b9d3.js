(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{1450:function(v,_,t){"use strict";t.r(_);var e=t(4),a=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"深入-rpc-框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#深入-rpc-框架"}},[v._v("#")]),v._v(" 深入 RPC 框架")]),v._v(" "),_("h3",{attrs:{id:"cap-原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cap-原则"}},[v._v("#")]),v._v(" CAP 原则")]),v._v(" "),_("p",[v._v("基于 CAP 原则:一致性（Consistency）、可用性（Availability）和分区容忍性（Partition Tolerance）三者不可兼得")]),v._v(" "),_("p",[v._v("什么是一致性、可用性和分区容忍性?")]),v._v(" "),_("ul",[_("li",[v._v("C - 一致性：所有节点在同一时间看到的数据相同")]),v._v(" "),_("li",[v._v("A - 可用性：每个请求都能得到响应（即使部分节点故障），但不保证是最新数据")]),v._v(" "),_("li",[v._v("P - 分区容忍性：指系统能够处理网络分区（节点间通信中断）的情况，即使部分节点无法通信，系统仍能正常运行")])]),v._v(" "),_("p",[v._v("CAP 理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类")]),v._v(" "),_("ul",[_("li",[v._v("CA：单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大")]),v._v(" "),_("li",[v._v("CP：满足一致性，分区容忍性的系统，通常性能不是特别高")]),v._v(" "),_("li",[v._v("AP：满足可用性，分区容忍性的系统，通常可能对一致性要求低一些")])]),v._v(" "),_("p",[v._v("AP 系统和 CP 系统的例子")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("系统")]),v._v(" "),_("th",[v._v("一致性")]),v._v(" "),_("th",[v._v("可用性")]),v._v(" "),_("th",[v._v("分区容忍性")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Eureka（AP）")]),v._v(" "),_("td",[v._v("Eureka 节点之间的数据复制是"),_("strong",[v._v("异步的")]),v._v("，因此在网络分区或延迟的情况下，不同节点之间的数据可能会暂时不一致，例如，某个服务实例在一个节点上注册，但可能不会立即同步到其他节点")]),v._v(" "),_("td",[v._v("Eureka 的设计目标是确保服务注册和发现功能始终可用，即使部分节点或网络出现故障；他会通过本地缓存去请求服务，以保证即使注册中心挂了，也可以获取可用的服务实例信息")]),v._v(" "),_("td",[v._v("Eureka 支持多节点集群部署，节点之间通过异步复制数据")])]),v._v(" "),_("tr",[_("td",[v._v("Zookeeper（CP）")]),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td")])])]),v._v(" "),_("h3",{attrs:{id:"注册中心的选择"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注册中心的选择"}},[v._v("#")]),v._v(" 注册中心的选择")]),v._v(" "),_("p",[v._v("注册中心可以说是微服务架构中的”通讯录“，它记录了服务和服务地址的映射关系，一般包含如下功能")]),v._v(" "),_("p",[v._v("服务发现")]),v._v(" "),_("ul",[_("li",[v._v("服务注册/反注册：保存服务提供者和服务调用者的信息")]),v._v(" "),_("li",[v._v("服务订阅/取消订阅：服务调用者订阅服务提供者的信息，最好有实时推送的功能")]),v._v(" "),_("li",[v._v("服务路由（可选）：具有筛选整合服务提供者的能力")])]),v._v(" "),_("p",[v._v("服务配置")]),v._v(" "),_("ul",[_("li",[v._v("配置订阅：服务提供者和服务调用者订阅微服务相关的配置")]),v._v(" "),_("li",[v._v("配置下发：主动将配置推送给服务提供者和服务调用者")])]),v._v(" "),_("p",[v._v("服务健康检测：检测服务提供者的健康情况")]),v._v(" "),_("h4",{attrs:{id:"eureka"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#eureka"}},[v._v("#")]),v._v(" Eureka")]),v._v(" "),_("p",[v._v("前面提到过，Eureka 是一个 AP 系统，是 Netflix 开源的"),_("strong",[v._v("服务发现组件")]),v._v("，它的设计目标是高可用性和弹性，因此在 CAP 中选择了 AP")]),v._v(" "),_("p",[v._v("Eureka 包含两个组件：Eureka Server 和 Eureka Client")]),v._v(" "),_("ul",[_("li",[v._v("Eureka Server 提供服务注册服务：各个微服务节点通过配置启动后，会在 EurekaServer 中进行注册，这样 EurekaServer 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到")]),v._v(" "),_("li",[v._v("Eureka Client 通过注册中心进行访问：本质上是一个 Java 客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的、使用轮询（round-robin）负载算法的负载均衡器。在应用启动后，将会向 Eureka Server 发送心跳（默认周期为30秒）。"),_("strong",[v._v("如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，EurekaServer 将会从服务注册表中把这个服务节点移除（默认90秒）")])])]),v._v(" "),_("p",[v._v("Eureka 有一个重要的特性叫"),_("strong",[v._v("自我保护机制")]),v._v("（Self-Preservation），这是它作为 AP 系统的核心设计之一")]),v._v(" "),_("ul",[_("li",[v._v("触发条件：当 Eureka 服务器节点在短时间内丢失过多客户端心跳（例如网络分区或大规模服务故障），Eureka 会进入自我保护模式")]),v._v(" "),_("li",[v._v("行为：在自我保护模式下，Eureka 不会立即注销丢失心跳的服务实例，"),_("strong",[v._v("而是保留这些实例，即使它们可能已经不可用")])]),v._v(" "),_("li",[v._v("目的：这是为了防止因网络分区或临时故障导致的服务实例被错误地注销，从而避免大规模服务不可用")]),v._v(" "),_("li",[v._v("影响：在自我保护模式下，Eureka 的数据可能不一致（例如保留了已宕机的服务实例），但保证了系统的可用性")])]),v._v(" "),_("h4",{attrs:{id:"zookeeper"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[v._v("#")]),v._v(" Zookeeper")]),v._v(" "),_("blockquote",[_("p",[v._v("Zookeeper 遵循 CP 原则，保证一致性和分区容错性")])]),v._v(" "),_("p",[v._v("ZooKeeper 是一个树形目录服务，其数据模型和 Unix 的文件系统目录树很类似，拥有一个层次化结构，数据以节点的形式存放在树中")]),v._v(" "),_("p",[v._v("Zookeeper 服务端常用命令")]),v._v(" "),_("ul",[_("li",[v._v("启动 ZooKeeper 服务: ./zkServer.sh start")]),v._v(" "),_("li",[v._v("查看 ZooKeeper 服务状态: ./zkServer.sh status")]),v._v(" "),_("li",[v._v("停止 ZooKeeper 服务: ./zkServer.sh stop")]),v._v(" "),_("li",[v._v("重启 ZooKeeper 服务: ./zkServer.sh restart")])]),v._v(" "),_("p",[v._v("Curator API：建立连接；添加节点；删除节点；修改节点；查询节点")]),v._v(" "),_("p",[v._v("Zookeeper 分布式锁，和 Redis 的分布式锁（Redission）类似，通过拿取/删除临时节点（Redis 是键值对）来实现锁，Curator 提供了基于五种基于 Zookeeper 的分布式锁方案")]),v._v(" "),_("ul",[_("li",[v._v("InterProcessSemaphoreMutex：分布式排它锁（非可重入锁）")]),v._v(" "),_("li",[v._v("InterProcessMutex：分布式可重入排它锁")]),v._v(" "),_("li",[v._v("InterProcessReadWriteLock：分布式读写锁")]),v._v(" "),_("li",[v._v("InterProcessMultiLock：将多个锁作为单个实体管理的容器")]),v._v(" "),_("li",[v._v("InterProcessSemaphoreV2：共享信号量")])]),v._v(" "),_("p",[v._v("Watch 事件监听：ZooKeeper 允许用户在指定节点上注册一些 Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper 实现分布式协调服务的重要特性")]),v._v(" "),_("p",[v._v("ZooKeeper 提供了三种 Watcher")]),v._v(" "),_("ol",[_("li",[v._v("NodeCache：只是监听某一个特定的节点")]),v._v(" "),_("li",[v._v("PathChildrenCache：监控一个 ZNode 的子节点")]),v._v(" "),_("li",[v._v("TreeCache：可以监控整个树上的所有节点，类似于 PathChildrenCache 和 NodeCache 的组合")])]),v._v(" "),_("p",[v._v("在 ZooKeeper "),_("strong",[v._v("集群")]),v._v("服务中有三个角色，这是一个经典的"),_("strong",[v._v("主从架构")])]),v._v(" "),_("ul",[_("li",[v._v("Leader 领导者：Leader 是集群的核心，负责处理所有写请求（如创建、更新、删除节点）和事务性操作，Leader 负责将写操作同步到所有 Follower 和 Observer 节点，确保数据一致性")]),v._v(" "),_("li",[v._v("Follower 跟随者：处理客户端的读请求，参与写请求的投票（ZooKeeper 使用 Zab 协议，写请求需要大多数节点确认），参与 Leader 选举")]),v._v(" "),_("li",[v._v("Observer 观察者：处理客户端的读请求，不参与写请求的投票，也不参与 Leader 选举。Observer 的"),_("strong",[v._v("主要作用是扩展 ZooKeeper 集群的读能力")]),v._v("，而不会增加写操作的开销")])]),v._v(" "),_("p",[v._v("就是说，Leader 负责写，Follower 和 Observer 负责读，并且通过同步复制（区别于 Eureka 的异步复制）从 Leader 节点中同步数据，以保证系统的一致性")]),v._v(" "),_("ul",[_("li",[v._v("Leader 相当于经典的主从架构中的 Master，而 Follower 相当于 Slave")])]),v._v(" "),_("p",[v._v("Zookeeper 集群的读写流程")]),v._v(" "),_("ol",[_("li",[v._v("写请求流程：\n"),_("ul",[_("li",[v._v("客户端发送写请求到任意节点（Leader 或 Follower）")]),v._v(" "),_("li",[v._v("如果请求发送到 Follower，Follower 会将请求转发给 Leader")]),v._v(" "),_("li",[v._v("Leader 将写请求作为提案（Proposal）广播给所有 Follower")]),v._v(" "),_("li",[v._v("Follower 收到提案后，会进行投票（ACK）")]),v._v(" "),_("li",[v._v("当大多数节点（包括 Leader 自己）确认后，Leader 会提交（Commit）该写操作，并通知所有 Follower 和 Observer 同步数据")])])]),v._v(" "),_("li",[v._v("读请求流程：\n"),_("ul",[_("li",[v._v("客户端发送读请求到任意节点（Leader、Follower 或 Observer）")]),v._v(" "),_("li",[v._v("节点直接返回本地数据，不需要与其他节点协商")])])])]),v._v(" "),_("p",[v._v("Leader 的选举：Zookeeper 集群的 Leader 是动态选举的，而不是静态指派")]),v._v(" "),_("ul",[_("li",[v._v("Serverid：服务器 ID，比如有三台服务器，编号分别为"),_("code",[v._v("1,2,3")]),v._v("，编号越大在选择算法中的权重越大")]),v._v(" "),_("li",[v._v("Zxid：数据 ID，服务器中存放的最大数据 ID 值越大说明数据越新，在选举算法中数据越新权重越大")])]),v._v(" "),_("p",[v._v("在 Leader 选举的过程中，如果某台 ZooKeeper 获得了超过半数的选票，则此 ZooKeeper 就可以成为 Leader 了")]),v._v(" "),_("p",[v._v("⁉ 我突然想到了 Nginx 的主进程和工作进程（因为看到了 Master 和 Slave），这是否也是一种主从架构？似乎不是，Nginx 就是一个主进程作为管理者，工作进程之间相互平等，无主从关系，实际做事的都是工作进程。就像 FTP 协议，21 端口控制，20 端口传输，你不能说这是一个主从吧")]),v._v(" "),_("ul",[_("li",[v._v("实际上，Nginx 是一个"),_("strong",[v._v("单主多进程")]),v._v("的架构，并不涉及数据一致性和分布式协调问题，而是专注于高效处理网络请求")])]),v._v(" "),_("p",[v._v("在 Zookeeper 集群中")]),v._v(" "),_("h4",{attrs:{id:"consul"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#consul"}},[v._v("#")]),v._v(" Consul")]),v._v(" "),_("blockquote",[_("p",[v._v("Consul 由 HashiCorp 公司推出，提供服务发现与配置，Consul 遵循 CP 原则，使用 Raft 算法保证数据的强一致性")])]),v._v(" "),_("p",[v._v("Consul 的特点")]),v._v(" "),_("ul",[_("li",[v._v("服务发现：服务可以通过 Consul 注册自己，其他服务可以通过 Consul 发现并调用这些服务，支持 "),_("strong",[v._v("HTTP")]),v._v(" 和 "),_("strong",[v._v("DNS")]),v._v(" 两种服务发现方式")]),v._v(" "),_("li",[v._v("健康检查：Consul 提供了强大的健康检查机制，可以定期检查服务的健康状态（类似于 Eureka 的心跳检测），如果服务不可用，Consul 会自动将其从服务列表中移除（而不是 Eureka 的自我保护机制），以保证一致性，同时失去高可用性")]),v._v(" "),_("li",[v._v("键值存储：Consul 提供了一个分布式的键值存储（KV Store），可以用于存储配置信息或共享数据")]),v._v(" "),_("li",[v._v("多数据中心支持：Consul 原生支持多数据中心部署，能够跨数据中心进行服务发现和配置管理")]),v._v(" "),_("li",[v._v("一致性协议：Consul 使用 "),_("strong",[v._v("Raft 协议")]),v._v(" 来保证数据的一致性和高可用性（Zookeeper 用的是 Zab 算法），因此它是一个 CP 系统")]),v._v(" "),_("li",[v._v("安全性：支持 ACL（访问控制列表）和 TLS 加密，确保服务通信的安全性")])]),v._v(" "),_("p",[v._v("和 Zookeeper 一样，是一个 CP 系统，强调一致性（C）而放弃一定的弹性（可用性 A）")]),v._v(" "),_("h4",{attrs:{id:"nacos"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nacos"}},[v._v("#")]),v._v(" Nacos")]),v._v(" "),_("blockquote",[_("p",[v._v("Nacos 支持两种模式："),_("strong",[v._v("AP 模式")]),v._v("（基于 Distro 协议）和 "),_("strong",[v._v("CP 模式")]),v._v("（基于 Raft 协议）")])]),v._v(" "),_("p",[v._v("Nacos 是阿里巴巴开源的一款 Java 实现的动态服务发现、配置管理和服务管理平台，是 Spring Cloud Alibaba 生态的核心组件之一，支持多种服务注册与发现模式")]),v._v(" "),_("p",[v._v("核心特性")]),v._v(" "),_("ul",[_("li",[v._v("服务发现：支持基于 DNS 和 RPC 的服务发现，提供服务的注册、注销和查询功能")]),v._v(" "),_("li",[v._v("动态 DNS：支持将服务名解析为具体的 IP 地址和端口")]),v._v(" "),_("li",[_("strong",[v._v("一致性协议")]),v._v(" "),_("ul",[_("li",[v._v("Nacos 支持两种模式："),_("strong",[v._v("AP 模式")]),v._v("（基于 Distro 协议）和 "),_("strong",[v._v("CP 模式")]),v._v("（基于 Raft 协议）")]),v._v(" "),_("li",[v._v("默认情况下，Nacos 使用 AP 模式，适合需要高可用性的场景，CP 模式适合需要强一致性的场景")])])]),v._v(" "),_("li",[v._v("健康检查：支持多种健康检查机制，包括心跳检测和主动探测")])]),v._v(" "),_("p",[v._v("模式的切换是 Nacos 的核心卖点，适合需要灵活选择 AP 或 CP 模式的场景")]),v._v(" "),_("h4",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("几种注册中心的区别")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("组件名")]),v._v(" "),_("th",[v._v("语言")]),v._v(" "),_("th",[v._v("CAP")]),v._v(" "),_("th",[v._v("服务健康检查")]),v._v(" "),_("th",[v._v("对外暴露接口")]),v._v(" "),_("th",[v._v("Spring Cloud 集成")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Eureka")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("AP")]),v._v(" "),_("td",[v._v("可配")]),v._v(" "),_("td",[v._v("HTTP")]),v._v(" "),_("td",[v._v("√")])]),v._v(" "),_("tr",[_("td",[v._v("Consul")]),v._v(" "),_("td",[v._v("Go")]),v._v(" "),_("td",[v._v("CP")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("HTTP / DNS")]),v._v(" "),_("td",[v._v("√")])]),v._v(" "),_("tr",[_("td",[v._v("Zookeeper")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("CP")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("客户端")]),v._v(" "),_("td",[v._v("√")])]),v._v(" "),_("tr",[_("td",[v._v("Nacos")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("AP / CP")]),v._v(" "),_("td",[v._v("支持")]),v._v(" "),_("td",[v._v("RPC / DNS")]),v._v(" "),_("td",[v._v("√")])])])]),v._v(" "),_("p",[v._v("CA 是单点集群，满足一致性和可用性，不支持分区，仅能用于单机系统（本地玩具）")]),v._v(" "),_("p",[v._v("在分布式系统中，分区容忍性一定是要满足的，所以注册中心的选取实际上就是在一致性和可用性之间的选取，通常而言，要满足一致性就要牺牲一定的性能（即 CP 的性能会略逊于 AP），或者说，“弹性”")]),v._v(" "),_("p",[v._v("Eureka 是网飞（Netflex）开源的，某知名视频网站，这样的网站处理讲究一个实时性、讲究一个弹性，而不需要高度的一致性，比如我去请求一个视频，我管你新的旧的，先打回来再说，我都上膛了，不得不起飞，所以可以选择 AP 系统，放弃一定的一致性而换来高可用性，以保证用户不管什么时候都不会请求炸膛")]),v._v(" "),_("p",[v._v("但是在一些强调一致性的场景下，比如支付，一定是不能有吞订单、吞付款记录的情况出现，他的一致性一定是要优先保障的，一定是要选择所谓的 CP 系统，当订单出现异常时，一定是拒绝服务（可能是引入熔断机制），而不能随随便便进行后台数据的读写")]),v._v(" "),_("h3",{attrs:{id:"服务调用的选择"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务调用的选择"}},[v._v("#")]),v._v(" 服务调用的选择")]),v._v(" "),_("h4",{attrs:{id:"resttemplate"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#resttemplate"}},[v._v("#")]),v._v(" RestTemplate")]),v._v(" "),_("p",[_("code",[v._v("RestTemplate")]),v._v(" 是 Spring 提供的一个用于同步 HTTP 请求的客户端工具，"),_("strong",[v._v("它封装了 HTTP 请求的细节")]),v._v("，例如请求方式（Get / Post）、请求格式（Json）等，支持 RESTful 风格的调用")]),v._v(" "),_("p",[v._v("核心特性")]),v._v(" "),_("ol",[_("li",[v._v("同步调用："),_("code",[v._v("RestTemplate")]),v._v(" 是同步阻塞的，适合简单的 HTTP 请求场景")]),v._v(" "),_("li",[v._v("支持多种 HTTP 方法：如 GET、POST、PUT、DELETE 等")]),v._v(" "),_("li",[v._v("集成 Spring 生态：与 Spring 框架无缝集成，支持消息转换（如 JSON、XML）")]),v._v(" "),_("li",[v._v("简单易用：适合快速开发和小规模项目")])]),v._v(" "),_("p",[v._v("就像傻软奥联给的密码机接口，就是封装的 RestTemplate 打")]),v._v(" "),_("h4",{attrs:{id:"ribbon"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ribbon"}},[v._v("#")]),v._v(" Ribbon")]),v._v(" "),_("p",[_("code",[v._v("Ribbon")]),v._v(" 是 Netflix 开源的客户端负载均衡器，通常与 "),_("code",[v._v("RestTemplate")]),v._v(" 或 "),_("code",[v._v("Feign")]),v._v(" 结合使用，用于在微服务架构中实现服务调用的负载均衡")]),v._v(" "),_("ul",[_("li",[v._v("什么是负载均衡？让我们回顾一下 Nginx 的负载均衡，简单的处理就是在多个后端服务中进行轮询请求，请求"),_("code",[v._v("1, 2, 3, 4")]),v._v("分别请求服务"),_("code",[v._v("A.1, A.2, A.1, A.2")]),v._v("，其中"),_("code",[v._v("A.1, A.2")]),v._v("就是两个相同功能的微服务接口")])]),v._v(" "),_("p",[v._v("核心特性")]),v._v(" "),_("ol",[_("li",[v._v("客户端负载均衡："),_("code",[v._v("Ribbon")]),v._v(" 在客户端实现负载均衡，支持多种负载均衡策略（如轮询、随机、加权等）")]),v._v(" "),_("li",[v._v("服务发现集成：与 Eureka、Consul 等服务注册中心集成，动态获取服务实例列表")]),v._v(" "),_("li",[v._v("故障容错：支持超时、重试等机制，提高系统的容错能力")])]),v._v(" "),_("h4",{attrs:{id:"feign-openfeign"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#feign-openfeign"}},[v._v("#")]),v._v(" Feign / OpenFeign")]),v._v(" "),_("p",[_("code",[v._v("Feign")]),v._v(" 是 Netflix 开源的一个声明式的 HTTP 客户端，旨在简化服务调用。它通过注解的方式定义接口，自动生成 HTTP 请求")]),v._v(" "),_("ul",[_("li",[v._v("值得注意的是，Feign 内置了 Ribbon，自带负载均衡配置项")])]),v._v(" "),_("p",[v._v("核心特性")]),v._v(" "),_("ol",[_("li",[v._v("声明式调用：通过注解定义接口，无需编写具体的 HTTP 请求代码")]),v._v(" "),_("li",[v._v("集成 Ribbon：默认集成了 Ribbon，支持客户端负载均衡")]),v._v(" "),_("li",[v._v("支持多种编码器/解码器：如 JSON、XML 等")])]),v._v(" "),_("p",[v._v("我理解为 HTTP 请求的一层封装，通过注解定义接口，而无需编写复杂的 HTTP 请求代码，但本质上是一样的，都是 HTTP 的同步阻塞调用")]),v._v(" "),_("p",[_("code",[v._v("OpenFeign")]),v._v(" 是 "),_("code",[v._v("Feign")]),v._v(" 的社区维护版本，Spring Cloud 对其进行了增强和集成。它继承了 "),_("code",[v._v("Feign")]),v._v(" 的所有特性，并增加了对 Spring 生态的支持（可以理解为更适合 Spring 宝宝体质的 Feign）")]),v._v(" "),_("img",{attrs:{src:t(736)}}),v._v(" "),_("p",[v._v("核心特性")]),v._v(" "),_("ol",[_("li",[v._v("声明式调用：与 "),_("code",[v._v("Feign")]),v._v(" 相同，通过注解定义接口")]),v._v(" "),_("li",[v._v("集成 Spring Cloud：支持 Spring Cloud 的"),_("strong",[v._v("服务发现、负载均衡、熔断器、超时控制")]),v._v("等特性")]),v._v(" "),_("li",[v._v("扩展性强：支持自定义编码器、解码器、拦截器等")])]),v._v(" "),_("p",[v._v("与 Feign 的区别就是，集成在 Spring Cloud 生态中，与微服务调用相结合，并支持更多的功能和扩展性")]),v._v(" "),_("h4",{attrs:{id:"dubbo"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dubbo"}},[v._v("#")]),v._v(" Dubbo")]),v._v(" "),_("p",[_("code",[v._v("Dubbo")]),v._v(" 是阿里巴巴开源的一款高性能 Java RPC 框架，主要用于分布式服务之间的远程调用，这里也说了，Dubbo 是一个 RPC 框架，他并不是打的 HTTP 请求，而是某种二进制协议（好像就叫 Dubbo 协议）")]),v._v(" "),_("p",[v._v("核心特性")]),v._v(" "),_("ol",[_("li",[v._v("高性能 RPC：基于 Netty 实现，性能优异")]),v._v(" "),_("li",[v._v("服务治理：支持负载均衡、服务降级、熔断、限流等功能")]),v._v(" "),_("li",[v._v("服务发现：支持多种注册中心（如 Zookeeper、Nacos）")]),v._v(" "),_("li",[v._v("多协议支持：支持 Dubbo 协议、HTTP、REST 等")]),v._v(" "),_("li",[v._v("分布式事务：支持分布式事务解决方案（如 Seata）")])]),v._v(" "),_("p",[v._v("适用于高性能的分布式服务调用和需要强大服务治理能力的场景")]),v._v(" "),_("p",[v._v("注册中心挂了之后，Dubbo 还能访问到服务吗？")]),v._v(" "),_("ul",[_("li",[v._v("分情况，如果之前调用过，Dubbo 会把服务地址缓存在本地，再次调用时不会访问注册中心，这里存在一致性的问题？")])]),v._v(" "),_("h4",{attrs:{id:"总结-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("几种服务调用的异同")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"left"}},[v._v("特性")]),v._v(" "),_("th",{staticStyle:{"text-align":"left"}},[v._v("RestTemplate")]),v._v(" "),_("th",{staticStyle:{"text-align":"left"}},[v._v("Ribbon")]),v._v(" "),_("th",{staticStyle:{"text-align":"left"}},[v._v("Feign")]),v._v(" "),_("th",{staticStyle:{"text-align":"left"}},[v._v("OpenFeign")]),v._v(" "),_("th",{staticStyle:{"text-align":"left"}},[v._v("Dubbo")])])]),v._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("strong",[v._v("调用方式")])]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("同步 HTTP 调用")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("客户端负载均衡")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("声明式 HTTP 调用")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("声明式 HTTP 调用")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("高性能 RPC 调用")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("strong",[v._v("负载均衡")])]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("不支持")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持（集成 Ribbon）")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持（集成 Ribbon）")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("strong",[v._v("服务发现")])]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("不支持")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持（集成 Eureka 等）")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持（集成 Eureka 等）")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持（集成 Eureka 等）")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("支持（集成 Zookeeper、Nacos 等）")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("strong",[v._v("性能")])]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("较低")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("中等")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("中等")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("中等")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("高")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[_("strong",[v._v("适用场景")])]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("简单 HTTP 请求")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("客户端负载均衡")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("声明式 HTTP 调用")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("Spring Cloud 生态")]),v._v(" "),_("td",{staticStyle:{"text-align":"left"}},[v._v("高性能分布式服务调用")])])])]),v._v(" "),_("p",[v._v("服务调用的选择")]),v._v(" "),_("ul",[_("li",[v._v("如果需要简单的 HTTP 请求，选择 "),_("strong",[v._v("RestTemplate")])]),v._v(" "),_("li",[v._v("如果需要客户端负载均衡，选择 "),_("strong",[v._v("Ribbon")])]),v._v(" "),_("li",[v._v("如果需要声明式 HTTP 调用，选择 "),_("strong",[v._v("Feign")]),v._v(" 或 "),_("strong",[v._v("OpenFeign")])]),v._v(" "),_("li",[v._v("如果需要高性能的 RPC 调用和强大的服务治理能力，选择 "),_("strong",[v._v("Dubbo")])])]),v._v(" "),_("h2",{attrs:{id:"深入-redis-集群"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#深入-redis-集群"}},[v._v("#")]),v._v(" 深入 Redis 集群")]),v._v(" "),_("h3",{attrs:{id:"主从架构如何避免脏读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主从架构如何避免脏读"}},[v._v("#")]),v._v(" 主从架构如何避免脏读")]),v._v(" "),_("p",[v._v("在 Redis 主从架构中：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("主节点")]),v._v("：负责处理写操作（如 SET、DEL），并将写操作同步到从节点")]),v._v(" "),_("li",[_("strong",[v._v("从节点")]),v._v("：负责处理读操作（如 GET），并提供数据的副本")])]),v._v(" "),_("p",[v._v("可以参考 Eureka 集群和 Zookeeper 集群的设计，感觉是差不多的（同属于 NoSQL）：主节点负责写，通过"),_("strong",[v._v("复制")]),v._v("将数据同步到副节点，而副节点只负责数据的读取")]),v._v(" "),_("p",[v._v("这里的复制加粗了，为什么呢？因为在 Eureka 中是异步复制，而 Zookeeper 中是同步复制，这造就了二者"),_("strong",[v._v("一致性")]),v._v("的差别，前者是 AP 系统，而后者是 CP 系统")]),v._v(" "),_("p",[v._v("在 Redis 集群中，这样的复制和 Eureka 一样，属于异步复制")]),v._v(" "),_("ul",[_("li",[v._v("由于主从同步是异步的，写操作在主节点完成后，并不会立即同步到从节点。因此，在同步完成之前，从节点可能会返回旧数据，导致"),_("strong",[v._v("脏读")])])]),v._v(" "),_("p",[v._v("一个很经典的避免脏读的方法："),_("strong",[v._v("读写锁")]),v._v("（写时禁止读）")]),v._v(" "),_("p",[v._v("这样会有很多局限性，存在以下问题：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("性能瓶颈")]),v._v("：写操作期间禁止读操作，会导致读请求被阻塞，降低系统的并发性能")]),v._v(" "),_("li",[_("strong",[v._v("系统卡住")]),v._v("：如果主节点的写 I/O 阻塞，整个系统可能会卡住，影响可用性")]),v._v(" "),_("li",[_("strong",[v._v("复杂性")]),v._v("：实现"),_("strong",[v._v("分布式读写锁")]),v._v("会增加系统的复杂性")])]),v._v(" "),_("p",[v._v("主从结构下，避免脏读除了读写锁还有什么方法呢？（天美 /(ㄒoㄒ)/~~）")]),v._v(" "),_("p",[v._v("4️⃣ 强制读主节点")]),v._v(" "),_("p",[v._v("对于敏感数据，强制性的让用户只能读取主节点内容，由于 Redis 是单线程的原子操作，单独读写一个节点，当然不会发生脏读啦")]),v._v(" "),_("p",[v._v("随之而来的是主节点负担增加，从而拖慢读写性能")]),v._v(" "),_("p",[v._v("1️⃣ 写后同步等待")]),v._v(" "),_("p",[v._v("刚刚提到，用读写锁，实际上是分布式锁的一种应用，这与“写后同步等待”不同，“写后同步等待”实际上就类似于 Eureka 的同步复制机制，主节点写完后对所有副节点进行阻塞的同步更新，更新完成后，才可以执行读操作")]),v._v(" "),_("p",[v._v("这可以使用 Redis 的 Wait 命令实现")]),v._v(" "),_("div",{staticClass:"language-sh line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sh"}},[_("code",[v._v("SET key value\nWAIT "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1000")]),v._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 等待至少 1 个从节点同步完成，超时时间为 1000 毫秒")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("p",[v._v("2️⃣ 版本号或时间戳机制")]),v._v(" "),_("p",[v._v("原理：为每个键（Key）添加版本号或时间戳，客户端在读取数据时检查版本号或时间戳，确保读取的是最新数据")]),v._v(" "),_("p",[v._v("优点")]),v._v(" "),_("ul",[_("li",[v._v("不需要阻塞读操作，性能较高")]),v._v(" "),_("li",[v._v("可以灵活控制数据的一致性级别")])]),v._v(" "),_("p",[v._v("缺点")]),v._v(" "),_("ul",[_("li",[v._v("需要在客户端实现额外的逻辑")]),v._v(" "),_("li",[v._v("增加了数据存储的开销（多一个存储字段）")])]),v._v(" "),_("p",[v._v("实现方式")]),v._v(" "),_("p",[v._v("在写操作时，更新键的版本号或时间戳")]),v._v(" "),_("div",{staticClass:"language-sh line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sh"}},[_("code",[v._v("SET key:version "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),v._v("\nSET key:value "),_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"data"')]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("p",[v._v("在读操作时，检查版本号或时间戳")]),v._v(" "),_("div",{staticClass:"language-sh line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sh"}},[_("code",[v._v("GET key:version\nGET key:value\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("p",[v._v("这里的读是指一次事务中的前后两次读（脏读的本质），在后一次做一个版本的检查，比如刚进入时读一次数据（这个数据上带一个版本号，或时间戳），然后在退出函数时再读一次，若版本号不同，则按后一次读出的数据为准")]),v._v(" "),_("p",[v._v("3️⃣ 最终一致性容忍")]),v._v(" "),_("p",[v._v("原理：接受一定时间内的脏读，通过业务逻辑容忍最终一致性")]),v._v(" "),_("p",[v._v("优点")]),v._v(" "),_("ul",[_("li",[v._v("性能最高，没有额外的同步开销")]),v._v(" "),_("li",[v._v("适合对一致性要求不高的场景")])]),v._v(" "),_("p",[v._v("缺点：不适用于对一致性要求严格的场景（如金融交易）")]),v._v(" "),_("p",[v._v("实现方式：在业务逻辑中处理脏读问题，例如")]),v._v(" "),_("ul",[_("li",[v._v("对脏读不敏感的数据（如用户昵称、文章内容）可以直接使用从节点读取")]),v._v(" "),_("li",[v._v("对脏读敏感的数据（如余额、库存）可以从主节点读取")])]),v._v(" "),_("p",[_("strong",[v._v("注意，我们可以强制用户在主节点上读取数据，这样可以保证不会出现脏读，代价是主节点负担较大")]),v._v("，所以这里的实现采取了折中的方案，敏感数据限定读主节点，非敏感数据读副节点")]),v._v(" "),_("p",[v._v("那么“最终一致性容忍”是个什么情况呢，允许了一部分的脏读，但换回了相当一部分的性能")]),v._v(" "),_("h3",{attrs:{id:"限流算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#限流算法"}},[v._v("#")]),v._v(" 限流算法")]),v._v(" "),_("p",[v._v("令牌桶算法、漏桶算法、固定窗口算法、滑动窗口算法以及动态限流算法")]),v._v(" "),_("ul",[_("li",[v._v("令牌桶：每秒给多少令牌，同时给定令牌上限，令牌用完了拒绝请求")]),v._v(" "),_("li",[v._v("漏桶：每秒处理多少个水滴（请求），类似于消息队列的方式，每秒消费多少个请求")]),v._v(" "),_("li",[v._v("固定窗口：固定时间窗口，每个窗口通过的请求有限")]),v._v(" "),_("li",[v._v("滑动窗口：细粒的划分时间，在每个大窗口中控制小窗口，并可以通过小窗口的状态判断大窗口的访问控制，详见示例")]),v._v(" "),_("li",[v._v("动态限流：根据系统负载动态调节漏桶的流速，负载越高，流速越小")])]),v._v(" "),_("p",[v._v("不同算法的异同")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("算法")]),v._v(" "),_("th",[v._v("原理")]),v._v(" "),_("th",[v._v("优点")]),v._v(" "),_("th",[v._v("缺点")]),v._v(" "),_("th",[v._v("适用场景")]),v._v(" "),_("th",[v._v("示例")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("令牌桶算法")]),v._v(" "),_("td",[v._v("系统以固定的速率向桶中添加令牌（Token），桶的容量是固定的。 每个请求需要从桶中获取一个令牌，如果桶中有足够的令牌，则允许请求通过；否则拒绝请求。 如果桶满了，新生成的令牌会被丢弃")]),v._v(" "),_("td",[v._v("可以应对突发流量，因为桶中的令牌可以累积。 限流速率平滑，适合需要控制平均速率的场景")]),v._v(" "),_("td",[v._v("实现相对复杂，需要维护令牌桶的状态。 突发流量可能导致短时间内大量请求通过")]),v._v(" "),_("td",[v._v("需要平滑限流的场景，如 API 网关、流量控制")]),v._v(" "),_("td",[v._v("假设桶的容量为 10，每秒生成 2 个令牌。 如果桶中有 5 个令牌，同时有 8 个请求到达，则前 5 个请求可以通过，后 3 个请求被拒绝")])]),v._v(" "),_("tr",[_("td",[v._v("漏桶算法")]),v._v(" "),_("td",[v._v("请求像水一样流入漏桶，漏桶以固定的速率处理请求（漏水）。 如果桶满了，新的请求会被丢弃或排队等待")]),v._v(" "),_("td",[v._v("限流速率非常平滑，适合需要严格控制请求速率的场景。 实现简单，容易理解")]),v._v(" "),_("td",[v._v("无法应对突发流量，即使桶中有空闲容量，请求也只能以固定速率通过。 可能导致请求的延迟增加")]),v._v(" "),_("td",[v._v("需要严格控制请求速率的场景，如消息队列、任务调度")]),v._v(" "),_("td",[v._v("假设漏桶的容量为 10，处理速率为每秒 2 个请求。 如果桶中有 5 个请求，同时有 8 个请求到达，则前 5 个请求可以进入桶中，后 3 个请求被拒绝。 桶中的请求以每秒 2 个的速率被处理")])]),v._v(" "),_("tr",[_("td",[v._v("固定窗口算法")]),v._v(" "),_("td",[v._v("将时间划分为固定的窗口（如 1 秒），每个窗口内允许通过的请求数量是固定的。 如果窗口内的请求数量超过限制，则拒绝多余的请求")]),v._v(" "),_("td",[v._v("实现简单，容易理解。 适合对限流精度要求不高的场景")]),v._v(" "),_("td",[v._v("无法应对窗口边界处的突发流量。例如，如果窗口大小为 1 秒，限制为 100 个请求，则可能在窗口的最后 100ms 内收到 100 个请求，而在下一个窗口的前 100ms 内又收到 100 个请求，导致实际通过的请求数量是限制的两倍。 限流不够平滑")]),v._v(" "),_("td",[v._v("对限流精度要求不高的场景，如简单的 API 限流")]),v._v(" "),_("td",[v._v("假设窗口大小为 1 秒，限制为 100 个请求。 如果在 1 秒内收到 120 个请求，则前 100 个请求可以通过，后 20 个请求被拒绝")])]),v._v(" "),_("tr",[_("td",[v._v("滑动窗口算法")]),v._v(" "),_("td",[v._v("将时间划分为多个小窗口（如 100ms），每个小窗口内允许通过的请求数量是固定的。 通过滑动窗口的方式动态计算当前时间窗口内的请求数量，如果超过限制，则拒绝多余的请求")]),v._v(" "),_("td",[v._v("比固定窗口算法更精确，能够更好地应对突发流量。 限流更加平滑")]),v._v(" "),_("td",[v._v("实现相对复杂，需要维护滑动窗口的状态。 计算开销较大")]),v._v(" "),_("td",[v._v("对限流精度要求较高的场景，如高并发 API 限流")]),v._v(" "),_("td",[v._v("假设窗口大小为 1 秒，划分为 10 个小窗口，每个小窗口的限制为 10 个请求。 如果在当前时间窗口内已经收到 90 个请求，则新的请求会被拒绝")])]),v._v(" "),_("tr",[_("td",[v._v("动态限流算法")]),v._v(" "),_("td",[v._v("根据系统的实时负载动态调整限流速率。 例如，当系统负载较高时，降低限流速率；当系统负载较低时，提高限流速率")]),v._v(" "),_("td",[v._v("能够根据系统状态动态调整限流策略，更加灵活。 适合负载波动较大的场景")]),v._v(" "),_("td",[v._v("实现复杂，需要实时监控系统状态。 调整限流速率的策略需要精心设计")]),v._v(" "),_("td",[v._v("负载波动较大的场景，如电商大促、秒杀活动")]),v._v(" "),_("td",[v._v("假设系统负载超过 80% 时，将限流速率从每秒 100 个请求降低到每秒 50 个请求")])])])]),v._v(" "),_("p",[v._v("限流算法的选择")]),v._v(" "),_("ul",[_("li",[v._v("如果需要平滑限流并支持突发流量，选择"),_("strong",[v._v("令牌桶算法")])]),v._v(" "),_("li",[v._v("如果需要严格控制请求速率，选择"),_("strong",[v._v("漏桶算法")])]),v._v(" "),_("li",[v._v("如果对限流精度要求不高，选择"),_("strong",[v._v("固定窗口算法")]),v._v("或"),_("strong",[v._v("计数器算法")])]),v._v(" "),_("li",[v._v("如果对限流精度要求较高，选择"),_("strong",[v._v("滑动窗口算法")])]),v._v(" "),_("li",[v._v("如果需要根据系统状态动态调整限流策略，选择"),_("strong",[v._v("动态限流算法")])])]),v._v(" "),_("h3",{attrs:{id:"缓存穿透、击穿和雪崩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透、击穿和雪崩"}},[v._v("#")]),v._v(" 缓存穿透、击穿和雪崩")]),v._v(" "),_("p",[v._v("缓存三兄弟，下次再说吧")]),v._v(" "),_("h2",{attrs:{id:"kubernetes"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[v._v("#")]),v._v(" Kubernetes")]),v._v(" "),_("p",[v._v("Kubernetes 是用于自动部署、扩展和容器化应用程序的开源系统")]),v._v(" "),_("p",[v._v("容器，"),_("strong",[v._v("轻量")]),v._v("的虚拟化技术")]),v._v(" "),_("ul",[_("li",[v._v("为应用程序提供运行环境")]),v._v(" "),_("li",[v._v("隔离运行在主机上不同进程")])]),v._v(" "),_("p",[v._v("重点在于：进程之间、进程和宿主操作系统相互隔离、互不影响")]),v._v(" "),_("p",[v._v("容器技术具有"),_("strong",[v._v("简化部署、快速启动、服务组合、易迁移")]),v._v("等优点")]),v._v(" "),_("h3",{attrs:{id:"docker"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[v._v("#")]),v._v(" Docker")]),v._v(" "),_("p",[v._v("Docker 三个最主要的概念")]),v._v(" "),_("ul",[_("li",[v._v("容器：运行在虚拟机上的进程")]),v._v(" "),_("li",[v._v("镜像：数据的一种存储形式，类似于程序之于进程")]),v._v(" "),_("li",[v._v("仓库：镜像库")])]),v._v(" "),_("p",[v._v("Docker 能够普遍使用起来，很大程度上个得益于 Docker 的仓库里汇集了很多已经标准化的镜像，大大提升了部署效率")]),v._v(" "),_("h3",{attrs:{id:"k3s-集群"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#k3s-集群"}},[v._v("#")]),v._v(" K3s 集群")]),v._v(" "),_("p",[v._v("当我们使用的容器服务多了，面临的访问量增大以后，我们就需要一种工具把这些容器统一的管理起来，需要实现对这些容器的自动部署、扩展和管理。也就是俗称的容器编排")]),v._v(" "),_("ul",[_("li",[v._v("Kubernetes 就是这样一种容器编排系统")])]),v._v(" "),_("p",[v._v("K3s 是 Rancher 实验室的一个"),_("strong",[v._v("轻量级")]),v._v(" Kubernetes 发行版，是由CNCF完全认证的Kubernetes产品，适合在资源受限的硬件上使用（例如IoT设备），它保留了Kubernetes的核心功能，但通过去除一些不必要的组件（如云服务提供商集成）来减小二进制文件的大小")]),v._v(" "),_("ul",[_("li",[v._v("K3s 有一个基础二进制包，其大小不到 100MB")])]),v._v(" "),_("p",[v._v("当然了，有好就有坏，轻量级带来的是功能的缺失，例如 K3s 目前不支持在主节点上运行除 SQLite 以外的任何其他数据库，也不支持多个主节点（在选择默认容器编排器时，定义需求和目标非常重要）")]),v._v(" "),_("p",[v._v("快速部署")]),v._v(" "),_("div",{staticClass:"language-sh line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sh"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[v._v("curl")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token parameter variable"}},[v._v("-sfL")]),v._v(" https://get.k3s.io "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("|")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("sh")]),v._v(" -\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 检查就绪代码")]),v._v("\ntakes maybe "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("30")]),v._v(" seconds\n\nk3s kubectl get "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("node")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br")])]),_("h3",{attrs:{id:"k8s-集群"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#k8s-集群"}},[v._v("#")]),v._v(" K8s 集群")]),v._v(" "),_("p",[v._v("Kubernetes 或 K8s 是最流行的管理容器的编排工具。它具有可移植性、灵活性和可扩展性，同时支持命令式/声明式配置和自动化，作为 CNCF 的一个毕业项目，拥有庞大的生态系统")])])}),[],!1,null,null,null);_.default=a.exports},736:function(v,_,t){v.exports=t.p+"assets/img/image-20250319214847181.608e5aa9.png"}}]);